{"version":3,"names":["_mapMemberToStorable","require","_mapUserToStorable","_QuickSqliteClient","_createUpsertQuery","upsertMembers","_ref","cid","_ref$flush","flush","members","queries","storableUsers","storableMembers","forEach","member","user","storableUser","mapUserToStorable","push","createUpsertQuery","storableMember","mapMemberToStorable","QuickSqliteClient","logger","executeSqlBatch","exports"],"sources":["upsertMembers.ts"],"sourcesContent":["import type { ChannelMemberResponse } from 'stream-chat';\n\nimport { mapMemberToStorable } from '../mappers/mapMemberToStorable';\nimport { mapUserToStorable } from '../mappers/mapUserToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const upsertMembers = ({\n  cid,\n  flush = true,\n  members,\n}: {\n  cid: string;\n  members: ChannelMemberResponse[];\n  flush?: boolean;\n}) => {\n  const queries: PreparedQueries[] = [];\n\n  const storableUsers: Array<ReturnType<typeof mapUserToStorable>> = [];\n  const storableMembers: Array<ReturnType<typeof mapMemberToStorable>> = [];\n\n  members?.forEach((member) => {\n    if (member.user) {\n      const storableUser = mapUserToStorable(member.user);\n      storableUsers.push(storableUser);\n      queries.push(createUpsertQuery('users', storableUser));\n    }\n    const storableMember = mapMemberToStorable({ cid, member });\n    storableMembers.push(storableMember);\n\n    queries.push(createUpsertQuery('members', storableMember));\n  });\n\n  QuickSqliteClient.logger?.('info', 'upsertMembers', {\n    cid,\n    flush,\n    storableMembers,\n    storableUsers,\n  });\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(queries);\n  }\n\n  return queries;\n};\n"],"mappings":";;;;AAEA,IAAAA,oBAAA,GAAAC,OAAA;AACA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AAGO,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAQpB;EAAA,IAPJC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAAC,UAAA,GAAAF,IAAA,CACHG,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;IACZE,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAMP,IAAMC,OAA0B,GAAG,EAAE;EAErC,IAAMC,aAA0D,GAAG,EAAE;EACrE,IAAMC,eAA8D,GAAG,EAAE;EAEzEH,OAAO,oBAAPA,OAAO,CAAEI,OAAO,CAAC,UAACC,MAAM,EAAK;IAC3B,IAAIA,MAAM,CAACC,IAAI,EAAE;MACf,IAAMC,YAAY,GAAG,IAAAC,oCAAiB,EAACH,MAAM,CAACC,IAAI,CAAC;MACnDJ,aAAa,CAACO,IAAI,CAACF,YAAY,CAAC;MAChCN,OAAO,CAACQ,IAAI,CAAC,IAAAC,oCAAiB,EAAC,OAAO,EAAEH,YAAY,CAAC,CAAC;IACxD;IACA,IAAMI,cAAc,GAAG,IAAAC,wCAAmB,EAAC;MAAEf,GAAG,EAAHA,GAAG;MAAEQ,MAAM,EAANA;IAAO,CAAC,CAAC;IAC3DF,eAAe,CAACM,IAAI,CAACE,cAAc,CAAC;IAEpCV,OAAO,CAACQ,IAAI,CAAC,IAAAC,oCAAiB,EAAC,SAAS,EAAEC,cAAc,CAAC,CAAC;EAC5D,CAAC,CAAC;EAEFE,oCAAiB,CAACC,MAAM,oBAAxBD,oCAAiB,CAACC,MAAM,CAAG,MAAM,EAAE,eAAe,EAAE;IAClDjB,GAAG,EAAHA,GAAG;IACHE,KAAK,EAALA,KAAK;IACLI,eAAe,EAAfA,eAAe;IACfD,aAAa,EAAbA;EACF,CAAC,CAAC;EAEF,IAAIH,KAAK,EAAE;IACTc,oCAAiB,CAACE,eAAe,CAACd,OAAO,CAAC;EAC5C;EAEA,OAAOA,OAAO;AAChB,CAAC;AAACe,OAAA,CAAArB,aAAA,GAAAA,aAAA"}