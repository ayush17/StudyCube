{"version":3,"names":["_emojiRegex","_interopRequireDefault","require","_debounce","_emojiData","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","FileState","freeze","FINISHED","NOT_SUPPORTED","UPLOAD_FAILED","UPLOADED","UPLOADING","exports","ProgressIndicatorTypes","IN_PROGRESS","INACTIVE","RETRY","MessageStatusTypes","FAILED","RECEIVED","SENDING","getIndicatorTypeForFileState","fileState","enableOfflineSupport","_indicatorMap","indicatorMap","_defineProperty2","isBlockedMessage","message","pattern","type","text","isBouncedMessage","moderation_details","undefined","defaultAutoCompleteSuggestionsLimit","defaultMentionAllAppUsersQuery","filters","options","sort","isUserResponse","user","getCommands","channel","_channel$getConfig","getConfig","commands","getMembers","members","state","values","filter","member","map","getWatchers","watchers","_toConsumableArray2","getMembersAndWatchers","users","concat","reduce","acc","cur","id","queryMembers","_ref","_asyncToGenerator2","_regenerator","mark","_callee","query","onReady","_options$limit","limit","response","_users","_args","arguments","wrap","_callee$","_context","prev","$autocomplete","sent","forEach","push","stop","_x","_x2","_x3","apply","queryMembersDebounced","debounce","leading","trailing","queryUsers","_ref2","_callee2","client","_options$limit2","_options$mentionAllAp","mentionAllAppUsersQuery","_users2","_args2","_callee2$","_context2","_extends2","$ne","userID","$or","_x4","_x5","_x6","queryUsersDebounced","isCommandTrigger","trigger","isEmojiTrigger","isMentionTrigger","defaultEmojiSearchIndex","search","results","_loop","emoji","v","names","some","includes","skins","tone","index","unicode","_iterator","compiledEmojis","_step","_ret","_typeof2","ACITriggerSettings","_ref3","emojiSearchIndex","onMentionSelectItem","dataProvider","indexOf","_options$limit3","selectedCommands","command","_command$name","a","b","_a$name","_b$name","nameA","toLowerCase","nameB","result","output","entity","caretPosition","key","_dataProvider","_callee3","_","_yield$emojiSearchInd","emojis","_callee3$","_context3","abrupt","t0","t1","_x7","_x8","_x9","callback","item","mentionAllAppUsersEnabled","data","matchingUsers","_user$name","makeImageCompatibleUrl","url","trim","getUrlWithoutParams","indexOfQuestion","substring","isLocalUrl","generateRandomId","Number","Math","random","replace","hasOnlyEmojis","emojiOnlyString","matchAll","EmojiRegex","join","originalTextWithNoSpaces","replaceAll","e","stringifyMessage","_ref4","deleted_at","latest_reactions","reply_count","status","updated_at","_ref5","toISOString","reduceMessagesToString","messages"],"sources":["utils.ts"],"sourcesContent":["import type React from 'react';\n\nimport EmojiRegex from 'emoji-regex';\nimport type { DebouncedFunc } from 'lodash';\nimport debounce from 'lodash/debounce';\nimport type {\n  Channel,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  CommandResponse,\n  FormatMessageResponse,\n  StreamChat,\n  UserResponse,\n} from 'stream-chat';\n\nimport type { MessageType } from '../components/MessageList/hooks/useMessageList';\nimport type {\n  EmojiSearchIndex,\n  MentionAllAppUsersQuery,\n} from '../contexts/messageInputContext/MessageInputContext';\nimport type {\n  SuggestionCommand,\n  SuggestionComponentType,\n  SuggestionUser,\n} from '../contexts/suggestionsContext/SuggestionsContext';\nimport { compiledEmojis, Emoji } from '../emoji-data';\nimport type { IconProps } from '../icons/utils/base';\nimport type { TableRowJoinedUser } from '../store/types';\nimport type { DefaultStreamChatGenerics, ValueOf } from '../types/types';\n\nexport type ReactionData = {\n  Icon: React.FC<IconProps>;\n  type: string;\n};\n\nexport const FileState = Object.freeze({\n  // finished and uploaded state are the same thing. First is set on frontend,\n  // while later is set on backend side\n  // TODO: Unify both of them\n  FINISHED: 'finished',\n  NOT_SUPPORTED: 'not_supported',\n  UPLOAD_FAILED: 'upload_failed',\n  UPLOADED: 'uploaded',\n  UPLOADING: 'uploading',\n});\n\nexport const ProgressIndicatorTypes: {\n  IN_PROGRESS: 'in_progress';\n  INACTIVE: 'inactive';\n  NOT_SUPPORTED: 'not_supported';\n  RETRY: 'retry';\n} = Object.freeze({\n  IN_PROGRESS: 'in_progress',\n  INACTIVE: 'inactive',\n  NOT_SUPPORTED: 'not_supported',\n  RETRY: 'retry',\n});\n\nexport const MessageStatusTypes = {\n  FAILED: 'failed',\n  RECEIVED: 'received',\n  SENDING: 'sending',\n};\n\nexport type FileStateValue = typeof FileState[keyof typeof FileState];\n\ntype Progress = ValueOf<typeof ProgressIndicatorTypes>;\ntype IndicatorStatesMap = Record<ValueOf<typeof FileState>, Progress | null>;\n\nexport const getIndicatorTypeForFileState = (\n  fileState: FileStateValue,\n  enableOfflineSupport: boolean,\n): Progress | null => {\n  const indicatorMap: IndicatorStatesMap = {\n    [FileState.UPLOADING]: enableOfflineSupport\n      ? ProgressIndicatorTypes.INACTIVE\n      : ProgressIndicatorTypes.IN_PROGRESS,\n    // If offline support is disabled, then there is no need\n    [FileState.UPLOAD_FAILED]: enableOfflineSupport\n      ? ProgressIndicatorTypes.INACTIVE\n      : ProgressIndicatorTypes.RETRY,\n    [FileState.NOT_SUPPORTED]: ProgressIndicatorTypes.NOT_SUPPORTED,\n    [FileState.UPLOADED]: ProgressIndicatorTypes.INACTIVE,\n    [FileState.FINISHED]: ProgressIndicatorTypes.INACTIVE,\n  };\n\n  return indicatorMap[fileState];\n};\n\n/**\n * Utility to check if the message is a Blocked message.\n * @param message\n * @returns boolean\n */\nexport const isBlockedMessage = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  message: MessageType<StreamChatGenerics> | TableRowJoinedUser<'messages'>,\n) => {\n  // The only indicator for the blocked message is its message type is error and that the message text contains \"Message was blocked by moderation policies\".\n  const pattern = /\\bMessage was blocked by moderation policies\\b/;\n  return message.type === 'error' && message.text && pattern.test(message.text);\n};\n\n/**\n *  Utility to check if the message is a Bounced message.\n * @param message\n * @returns boolean\n */\nexport const isBouncedMessage = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  message: MessageType<StreamChatGenerics>,\n) => message.type === 'error' && message.moderation_details !== undefined;\n\nconst defaultAutoCompleteSuggestionsLimit = 10;\nconst defaultMentionAllAppUsersQuery = {\n  filters: {},\n  options: {},\n  sort: {},\n};\n\nconst isUserResponse = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  user: SuggestionUser<StreamChatGenerics> | undefined,\n): user is SuggestionUser<StreamChatGenerics> =>\n  (user as SuggestionUser<StreamChatGenerics>) !== undefined;\n\nconst getCommands = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n) => channel.getConfig()?.commands || [];\n\nconst getMembers = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  const members = channel.state.members;\n\n  return Object.values(members).length\n    ? (\n        Object.values(members).filter((member) => member.user) as Array<\n          ChannelMemberResponse<StreamChatGenerics> & { user: UserResponse<StreamChatGenerics> }\n        >\n      ).map((member) => member.user)\n    : [];\n};\n\nconst getWatchers = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  const watchers = channel.state.watchers;\n  return Object.values(watchers).length ? [...Object.values(watchers)] : [];\n};\n\nconst getMembersAndWatchers = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  const users = [...getMembers(channel), ...getWatchers(channel)];\n\n  return Object.values(\n    users.reduce((acc, cur) => {\n      if (!acc[cur.id]) {\n        acc[cur.id] = cur;\n      }\n\n      return acc;\n    }, {} as { [key: string]: SuggestionUser<StreamChatGenerics> }),\n  );\n};\n\nconst queryMembers = async <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: Channel<StreamChatGenerics>,\n  query: SuggestionUser<StreamChatGenerics>['name'],\n  onReady?: (users: SuggestionUser<StreamChatGenerics>[]) => void,\n  options: {\n    limit?: number;\n  } = {},\n): Promise<void> => {\n  const { limit = defaultAutoCompleteSuggestionsLimit } = options;\n\n  if (typeof query === 'string') {\n    const response = (await (channel as unknown as Channel).queryMembers(\n      {\n        name: { $autocomplete: query },\n      },\n      {},\n      { limit },\n    )) as ChannelMemberAPIResponse<StreamChatGenerics>;\n\n    const users: SuggestionUser<StreamChatGenerics>[] = [];\n    response.members.forEach((member) => isUserResponse(member.user) && users.push(member.user));\n    if (onReady && users) {\n      onReady(users);\n    }\n  }\n};\n\nexport const queryMembersDebounced = debounce(queryMembers, 200, {\n  leading: false,\n  trailing: true,\n});\n\nconst queryUsers = async <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  client: StreamChat<StreamChatGenerics>,\n  query: SuggestionUser<StreamChatGenerics>['name'],\n  onReady?: (users: SuggestionUser<StreamChatGenerics>[]) => void,\n  options: {\n    limit?: number;\n    mentionAllAppUsersQuery?: MentionAllAppUsersQuery<StreamChatGenerics>;\n  } = {},\n): Promise<void> => {\n  if (typeof query === 'string') {\n    const {\n      limit = defaultAutoCompleteSuggestionsLimit,\n      mentionAllAppUsersQuery = defaultMentionAllAppUsersQuery,\n    } = options;\n    const filters = {\n      id: { $ne: client.userID },\n      ...mentionAllAppUsersQuery?.filters,\n    };\n\n    if (query) {\n      // @ts-ignore\n      filters.$or = [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }];\n    }\n\n    const response = await client.queryUsers(\n      // @ts-ignore\n      filters,\n      { id: 1, ...mentionAllAppUsersQuery?.sort },\n      { limit, ...mentionAllAppUsersQuery?.options },\n    );\n    const users: SuggestionUser<StreamChatGenerics>[] = [];\n    response.users.forEach((user) => isUserResponse(user) && users.push(user));\n    if (onReady && users) {\n      onReady(users);\n    }\n  }\n};\n\nexport const queryUsersDebounced = debounce(queryUsers, 200, {\n  leading: false,\n  trailing: true,\n});\n\nexport const isCommandTrigger = (trigger: Trigger): trigger is '/' => trigger === '/';\n\nexport const isEmojiTrigger = (trigger: Trigger): trigger is ':' => trigger === ':';\n\nexport const isMentionTrigger = (trigger: Trigger): trigger is '@' => trigger === '@';\n\nexport type Trigger = '/' | '@' | ':';\n\nexport type TriggerSettings<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  '/'?: {\n    dataProvider: (\n      query: CommandResponse<StreamChatGenerics>['name'],\n      text: string,\n      onReady?: (\n        data: CommandResponse<StreamChatGenerics>[],\n        q: CommandResponse<StreamChatGenerics>['name'],\n      ) => void,\n      options?: {\n        limit?: number;\n      },\n    ) => SuggestionCommand<StreamChatGenerics>[];\n    output: (entity: CommandResponse<StreamChatGenerics>) => {\n      caretPosition: string;\n      key: string;\n      text: string;\n    };\n    type: SuggestionComponentType;\n  };\n  ':'?: {\n    dataProvider: (\n      query: Emoji['name'],\n      _: string,\n      onReady?: (data: Emoji[], q: Emoji['name']) => void,\n    ) => Emoji[] | Promise<Emoji[]>;\n    output: (entity: Emoji) => {\n      caretPosition: string;\n      key: string;\n      text: string;\n    };\n    type: SuggestionComponentType;\n  };\n  '@'?: {\n    callback: (item: SuggestionUser<StreamChatGenerics>) => void;\n    dataProvider: (\n      query: SuggestionUser<StreamChatGenerics>['name'],\n      _: string,\n      onReady?: (\n        data: SuggestionUser<StreamChatGenerics>[],\n        q: SuggestionUser<StreamChatGenerics>['name'],\n      ) => void,\n      options?: {\n        limit?: number;\n        mentionAllAppUsersEnabled?: boolean;\n        mentionAllAppUsersQuery?: MentionAllAppUsersQuery<StreamChatGenerics>;\n      },\n    ) => SuggestionUser<StreamChatGenerics>[] | Promise<void> | void;\n    output: (entity: SuggestionUser<StreamChatGenerics>) => {\n      caretPosition: string;\n      key: string;\n      text: string;\n    };\n    type: SuggestionComponentType;\n  };\n};\n\nexport type ACITriggerSettingsParams<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  channel: Channel<StreamChatGenerics>;\n  client: StreamChat<StreamChatGenerics>;\n  onMentionSelectItem: (item: SuggestionUser<StreamChatGenerics>) => void;\n  emojiSearchIndex?: EmojiSearchIndex;\n};\n\nexport type QueryUsersFunction<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = (\n  client: StreamChat<StreamChatGenerics>,\n  query: SuggestionUser<StreamChatGenerics>['name'],\n  onReady?: (users: SuggestionUser<StreamChatGenerics>[]) => void,\n  options?: {\n    limit?: number;\n    mentionAllAppUsersQuery?: MentionAllAppUsersQuery<StreamChatGenerics>;\n  },\n) => Promise<void>;\n\nexport type QueryMembersFunction<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = (\n  channel: Channel<StreamChatGenerics>,\n  query: SuggestionUser<StreamChatGenerics>['name'],\n  onReady?: (users: SuggestionUser<StreamChatGenerics>[]) => void,\n  options?: {\n    limit?: number;\n  },\n) => Promise<void>;\n\n/**\n * Default emoji search index for auto complete text input\n */\nexport const defaultEmojiSearchIndex: EmojiSearchIndex = {\n  search: (query) => {\n    const results = [];\n\n    for (const emoji of compiledEmojis) {\n      if (results.length >= 10) return results;\n      if (emoji.names.some((name) => name.includes(query))) {\n        // Aggregate skins as different toned emojis - if skins are present\n        if (emoji.skins) {\n          results.push({\n            ...emoji,\n            name: `${emoji.name}-tone-1`,\n            skins: undefined,\n          });\n          emoji.skins.forEach((tone, index) =>\n            results.push({\n              ...emoji,\n              name: `${emoji.name}-tone-${index + 2}`,\n              skins: undefined,\n              unicode: tone,\n            }),\n          );\n        } else {\n          results.push(emoji);\n        }\n      }\n    }\n\n    return results;\n  },\n};\n\n/**\n * ACI = AutoCompleteInput\n *\n * DataProvider accepts `onReady` function, which will execute once the data is ready.\n * Another approach would have been to simply return the data from dataProvider and let the\n * component await for it and then execute the required logic. We are going for callback instead\n * of async-await since we have debounce function in dataProvider. Which will delay the execution\n * of api call on trailing end of debounce (lets call it a1) but will return with result of\n * previous call without waiting for a1. So in this case, we want to execute onReady, when trailing\n * end of debounce executes.\n */\nexport const ACITriggerSettings = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  channel,\n  client,\n  emojiSearchIndex,\n  onMentionSelectItem,\n}: ACITriggerSettingsParams<StreamChatGenerics>): TriggerSettings<StreamChatGenerics> => ({\n  '/': {\n    dataProvider: (query, text, onReady, options = {}) => {\n      if (text.indexOf('/') !== 0) return [];\n\n      const { limit = defaultAutoCompleteSuggestionsLimit } = options;\n      const selectedCommands = !query\n        ? getCommands(channel)\n        : getCommands(channel).filter((command) => query && command.name?.indexOf(query) !== -1);\n\n      // sort alphabetically unless the you're matching the first char\n      selectedCommands.sort((a, b) => {\n        let nameA = a.name?.toLowerCase() || '';\n        let nameB = b.name?.toLowerCase() || '';\n        if (query && nameA.indexOf(query) === 0) {\n          nameA = `0${nameA}`;\n        }\n        if (query && nameB.indexOf(query) === 0) {\n          nameB = `0${nameB}`;\n        }\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n\n        return 0;\n      });\n\n      const result = selectedCommands.slice(0, limit);\n\n      if (onReady) {\n        onReady(result, query);\n      }\n\n      return result;\n    },\n    output: (entity) => ({\n      caretPosition: 'next',\n      key: `${entity.name}`,\n      text: `/${entity.name}`,\n    }),\n    type: 'command',\n  },\n  ':': {\n    dataProvider: async (query, _, onReady) => {\n      if (!query) return [];\n\n      const emojis = (await emojiSearchIndex?.search(query)) ?? [];\n\n      if (onReady) {\n        onReady(emojis, query);\n      }\n\n      return emojis;\n    },\n    output: (entity) => ({\n      caretPosition: 'next',\n      key: entity.name,\n      text: entity.unicode,\n    }),\n    type: 'emoji',\n  },\n  '@': {\n    callback: (item) => {\n      onMentionSelectItem(item);\n    },\n    dataProvider: (\n      query,\n      _,\n      onReady,\n      options = {\n        limit: defaultAutoCompleteSuggestionsLimit,\n        mentionAllAppUsersEnabled: false,\n        mentionAllAppUsersQuery: defaultMentionAllAppUsersQuery,\n      },\n    ) => {\n      if (options?.mentionAllAppUsersEnabled) {\n        return (queryUsersDebounced as DebouncedFunc<QueryUsersFunction<StreamChatGenerics>>)(\n          client,\n          query,\n          (data) => {\n            if (onReady) {\n              onReady(data, query);\n            }\n          },\n          {\n            limit: options.limit,\n            mentionAllAppUsersQuery: options.mentionAllAppUsersQuery,\n          },\n        );\n      }\n\n      /**\n       * By default, we return maximum 100 members via queryChannels api call.\n       * Thus it is safe to assume, that if number of members in channel.state is < 100,\n       * then all the members are already available on client side and we don't need to\n       * make any api call to queryMembers endpoint.\n       */\n      if (!query || Object.values(channel.state.members).length < 100) {\n        const users = getMembersAndWatchers(channel);\n\n        const matchingUsers = users.filter((user) => {\n          if (!query) return true;\n          if (user.name?.toLowerCase().indexOf(query.toLowerCase()) !== -1) {\n            return true;\n          }\n          if (user.id.toLowerCase().indexOf(query.toLowerCase()) !== -1) {\n            return true;\n          }\n          return false;\n        });\n\n        const data = matchingUsers.slice(0, options?.limit);\n\n        if (onReady) {\n          onReady(data, query);\n        }\n\n        return data;\n      }\n\n      return (queryMembersDebounced as DebouncedFunc<QueryMembersFunction<StreamChatGenerics>>)(\n        channel,\n        query,\n        (data) => {\n          if (onReady) {\n            onReady(data, query);\n          }\n        },\n        {\n          limit: options.limit,\n        },\n      );\n    },\n    output: (entity) => ({\n      caretPosition: 'next',\n      key: entity.id,\n      text: `@${entity.name || entity.id}`,\n    }),\n    type: 'mention',\n  },\n});\n\nexport const makeImageCompatibleUrl = (url: string) =>\n  (url.indexOf('//') === 0 ? `https:${url}` : url).trim();\n\nexport const getUrlWithoutParams = (url?: string) => {\n  if (!url) return url;\n\n  const indexOfQuestion = url.indexOf('?');\n  if (indexOfQuestion === -1) return url;\n\n  return url.substring(0, url.indexOf('?'));\n};\n\nexport const isLocalUrl = (url: string) => url.indexOf('http') !== 0;\n\nexport const generateRandomId = (a = ''): string =>\n  a\n    ? /* eslint-disable no-bitwise */\n      ((Number(a) ^ (Math.random() * 16)) >> (Number(a) / 4)).toString(16)\n    : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, generateRandomId);\n\n/*\n * Returns true if the message text only contains emojis\n */\nexport const hasOnlyEmojis = (text: string) => {\n  try {\n    // get all emojis in the string\n    const emojiOnlyString = [...text.matchAll(EmojiRegex())].join('');\n    // remove all spaces from original text\n    const originalTextWithNoSpaces = text.replaceAll(/\\s/g, '');\n    // check if both are the same\n    return (\n      emojiOnlyString.length !== 0 && emojiOnlyString.length === originalTextWithNoSpaces.length\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Stringifies a message object\n * @param {FormatMessageResponse<StreamChatGenerics>} message - the message object to be stringified\n * @returns {string} The stringified message\n */\nconst stringifyMessage = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  deleted_at,\n  latest_reactions,\n  reply_count,\n  status,\n  type,\n  updated_at,\n}: FormatMessageResponse<StreamChatGenerics>): string =>\n  `${type}${deleted_at}${\n    latest_reactions ? latest_reactions.map(({ type }) => type).join() : ''\n  }${reply_count}${status}${updated_at?.toISOString?.() || updated_at}`;\n\n/**\n * Reduces a list of messages to strings that are used in useEffect & useMemo\n * @param {messages} messages - the array of messages to be compared\n * @returns {string} The mapped message string\n */\nexport const reduceMessagesToString = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  messages: FormatMessageResponse<StreamChatGenerics>[],\n): string => messages.map(stringifyMessage).join();\n"],"mappings":";;;;;;;;;;;AAEA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AAqBA,IAAAE,UAAA,GAAAF,OAAA;AAAsD,SAAAG,gCAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,oBAAAE,EAAA,UAAAA,EAAA,GAAAA,EAAA,CAAAG,IAAA,CAAAL,CAAA,GAAAM,IAAA,CAAAC,IAAA,CAAAL,EAAA,OAAAM,KAAA,CAAAC,OAAA,CAAAT,CAAA,MAAAE,EAAA,GAAAQ,2BAAA,CAAAV,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAW,MAAA,qBAAAT,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAU,CAAA,+BAAAA,CAAA,IAAAZ,CAAA,CAAAW,MAAA,WAAAE,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAY,CAAA,sBAAAG,SAAA;AAAA,SAAAL,4BAAAV,CAAA,EAAAgB,MAAA,SAAAhB,CAAA,qBAAAA,CAAA,sBAAAiB,iBAAA,CAAAjB,CAAA,EAAAgB,MAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAhB,IAAA,CAAAL,CAAA,EAAAsB,KAAA,aAAAJ,CAAA,iBAAAlB,CAAA,CAAAuB,WAAA,EAAAL,CAAA,GAAAlB,CAAA,CAAAuB,WAAA,CAAAC,IAAA,MAAAN,CAAA,cAAAA,CAAA,mBAAAV,KAAA,CAAAiB,IAAA,CAAAzB,CAAA,OAAAkB,CAAA,+DAAAQ,IAAA,CAAAR,CAAA,UAAAD,iBAAA,CAAAjB,CAAA,EAAAgB,MAAA;AAAA,SAAAC,kBAAAU,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAAhB,MAAA,EAAAiB,GAAA,GAAAD,GAAA,CAAAhB,MAAA,WAAAC,CAAA,MAAAiB,IAAA,OAAArB,KAAA,CAAAoB,GAAA,GAAAhB,CAAA,GAAAgB,GAAA,EAAAhB,CAAA,IAAAiB,IAAA,CAAAjB,CAAA,IAAAe,GAAA,CAAAf,CAAA,UAAAiB,IAAA;AAU/C,IAAMC,SAAS,GAAGX,MAAM,CAACY,MAAM,CAAC;EAIrCC,QAAQ,EAAE,UAAU;EACpBC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE,eAAe;EAC9BC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE;AACb,CAAC,CAAC;AAACC,OAAA,CAAAP,SAAA,GAAAA,SAAA;AAEI,IAAMQ,sBAKZ,GAAGnB,MAAM,CAACY,MAAM,CAAC;EAChBQ,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBP,aAAa,EAAE,eAAe;EAC9BQ,KAAK,EAAE;AACT,CAAC,CAAC;AAACJ,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AAEI,IAAMI,kBAAkB,GAAG;EAChCC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,OAAO,EAAE;AACX,CAAC;AAACR,OAAA,CAAAK,kBAAA,GAAAA,kBAAA;AAOK,IAAMI,4BAA4B,GAAG,SAA/BA,4BAA4BA,CACvCC,SAAyB,EACzBC,oBAA6B,EACT;EAAA,IAAAC,aAAA;EACpB,IAAMC,YAAgC,IAAAD,aAAA,WAAAE,gBAAA,aAAAF,aAAA,EACnCnB,SAAS,CAACM,SAAS,EAAGY,oBAAoB,GACvCV,sBAAsB,CAACE,QAAQ,GAC/BF,sBAAsB,CAACC,WAAW,OAAAY,gBAAA,aAAAF,aAAA,EAErCnB,SAAS,CAACI,aAAa,EAAGc,oBAAoB,GAC3CV,sBAAsB,CAACE,QAAQ,GAC/BF,sBAAsB,CAACG,KAAK,OAAAU,gBAAA,aAAAF,aAAA,EAC/BnB,SAAS,CAACG,aAAa,EAAGK,sBAAsB,CAACL,aAAa,OAAAkB,gBAAA,aAAAF,aAAA,EAC9DnB,SAAS,CAACK,QAAQ,EAAGG,sBAAsB,CAACE,QAAQ,OAAAW,gBAAA,aAAAF,aAAA,EACpDnB,SAAS,CAACE,QAAQ,EAAGM,sBAAsB,CAACE,QAAQ,GAAAS,aAAA,CACtD;EAED,OAAOC,YAAY,CAACH,SAAS,CAAC;AAChC,CAAC;AAACV,OAAA,CAAAS,4BAAA,GAAAA,4BAAA;AAOK,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAG3BC,OAAyE,EACtE;EAEH,IAAMC,OAAO,GAAG,gDAAgD;EAChE,OAAOD,OAAO,CAACE,IAAI,KAAK,OAAO,IAAIF,OAAO,CAACG,IAAI,IAAIF,OAAO,CAAC5B,IAAI,CAAC2B,OAAO,CAACG,IAAI,CAAC;AAC/E,CAAC;AAACnB,OAAA,CAAAe,gBAAA,GAAAA,gBAAA;AAOK,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAG3BJ,OAAwC;EAAA,OACrCA,OAAO,CAACE,IAAI,KAAK,OAAO,IAAIF,OAAO,CAACK,kBAAkB,KAAKC,SAAS;AAAA;AAACtB,OAAA,CAAAoB,gBAAA,GAAAA,gBAAA;AAE1E,IAAMG,mCAAmC,GAAG,EAAE;AAC9C,IAAMC,8BAA8B,GAAG;EACrCC,OAAO,EAAE,CAAC,CAAC;EACXC,OAAO,EAAE,CAAC,CAAC;EACXC,IAAI,EAAE,CAAC;AACT,CAAC;AAED,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAGlBC,IAAoD;EAAA,OAEnDA,IAAI,KAA4CP,SAAS;AAAA;AAE5D,IAAMQ,WAAW,GAAG,SAAdA,WAAWA,CAGfC,OAAoC;EAAA,IAAAC,kBAAA;EAAA,OACjC,EAAAA,kBAAA,GAAAD,OAAO,CAACE,SAAS,CAAC,CAAC,qBAAnBD,kBAAA,CAAqBE,QAAQ,KAAI,EAAE;AAAA;AAExC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAGdJ,OAAoC,EACjC;EACH,IAAMK,OAAO,GAAGL,OAAO,CAACM,KAAK,CAACD,OAAO;EAErC,OAAOtD,MAAM,CAACwD,MAAM,CAACF,OAAO,CAAC,CAAC9D,MAAM,GAE9BQ,MAAM,CAACwD,MAAM,CAACF,OAAO,CAAC,CAACG,MAAM,CAAC,UAACC,MAAM;IAAA,OAAKA,MAAM,CAACX,IAAI;EAAA,EAAC,CAGtDY,GAAG,CAAC,UAACD,MAAM;IAAA,OAAKA,MAAM,CAACX,IAAI;EAAA,EAAC,GAC9B,EAAE;AACR,CAAC;AAED,IAAMa,WAAW,GAAG,SAAdA,WAAWA,CAGfX,OAAoC,EACjC;EACH,IAAMY,QAAQ,GAAGZ,OAAO,CAACM,KAAK,CAACM,QAAQ;EACvC,OAAO7D,MAAM,CAACwD,MAAM,CAACK,QAAQ,CAAC,CAACrE,MAAM,OAAAsE,mBAAA,aAAO9D,MAAM,CAACwD,MAAM,CAACK,QAAQ,CAAC,IAAI,EAAE;AAC3E,CAAC;AAED,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAGzBd,OAAoC,EACjC;EACH,IAAMe,KAAK,MAAAC,MAAA,KAAAH,mBAAA,aAAOT,UAAU,CAACJ,OAAO,CAAC,OAAAa,mBAAA,aAAKF,WAAW,CAACX,OAAO,CAAC,EAAC;EAE/D,OAAOjD,MAAM,CAACwD,MAAM,CAClBQ,KAAK,CAACE,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAK;IACzB,IAAI,CAACD,GAAG,CAACC,GAAG,CAACC,EAAE,CAAC,EAAE;MAChBF,GAAG,CAACC,GAAG,CAACC,EAAE,CAAC,GAAGD,GAAG;IACnB;IAEA,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAA0D,CAChE,CAAC;AACH,CAAC;AAED,IAAMG,YAAY;EAAA,IAAAC,IAAA,OAAAC,kBAAA,aAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAC,QAGnB1B,OAAoC,EACpC2B,KAAiD,EACjDC,OAA+D;IAAA,IAAAjC,OAAA;MAAAkC,cAAA;MAAAC,KAAA;MAAAC,QAAA;MAAAC,MAAA;MAAAC,KAAA,GAAAC,SAAA;IAAA,OAAAV,YAAA,YAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAnG,IAAA;QAAA;UAC/DyD,OAEC,GAAAsC,KAAA,CAAA1F,MAAA,QAAA0F,KAAA,QAAA1C,SAAA,GAAA0C,KAAA,MAAG,CAAC,CAAC;UAAAJ,cAAA,GAEkDlC,OAAO,CAAvDmC,KAAK,EAALA,KAAK,GAAAD,cAAA,cAAGrC,mCAAmC,GAAAqC,cAAA;UAAA,MAE/C,OAAOF,KAAK,KAAK,QAAQ;YAAAU,QAAA,CAAAnG,IAAA;YAAA;UAAA;UAAAmG,QAAA,CAAAnG,IAAA;UAAA,OACF8D,OAAO,CAAwBqB,YAAY,CAClE;YACEjE,IAAI,EAAE;cAAEmF,aAAa,EAAEZ;YAAM;UAC/B,CAAC,EACD,CAAC,CAAC,EACF;YAAEG,KAAK,EAALA;UAAM,CACV,CAAC;QAAA;UANKC,QAAQ,GAAAM,QAAA,CAAAG,IAAA;UAQRzB,MAA2C,GAAG,EAAE;UACtDgB,QAAQ,CAAC1B,OAAO,CAACoC,OAAO,CAAC,UAAChC,MAAM;YAAA,OAAKZ,cAAc,CAACY,MAAM,CAACX,IAAI,CAAC,IAAIiB,MAAK,CAAC2B,IAAI,CAACjC,MAAM,CAACX,IAAI,CAAC;UAAA,EAAC;UAC5F,IAAI8B,OAAO,IAAIb,MAAK,EAAE;YACpBa,OAAO,CAACb,MAAK,CAAC;UAChB;QAAC;QAAA;UAAA,OAAAsB,QAAA,CAAAM,IAAA;MAAA;IAAA,GAAAjB,OAAA;EAAA,CAEJ;EAAA,gBA3BKL,YAAYA,CAAAuB,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAxB,IAAA,CAAAyB,KAAA,OAAAb,SAAA;EAAA;AAAA,GA2BjB;AAEM,IAAMc,qBAAqB,GAAG,IAAAC,oBAAQ,EAAC5B,YAAY,EAAE,GAAG,EAAE;EAC/D6B,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAAClF,OAAA,CAAA+E,qBAAA,GAAAA,qBAAA;AAEH,IAAMI,UAAU;EAAA,IAAAC,KAAA,OAAA9B,kBAAA,aAAAC,YAAA,YAAAC,IAAA,CAAG,SAAA6B,SAGjBC,MAAsC,EACtC5B,KAAiD,EACjDC,OAA+D;IAAA,IAAAjC,OAAA;MAAA6D,eAAA;MAAA1B,KAAA;MAAA2B,qBAAA;MAAAC,uBAAA;MAAAhE,OAAA;MAAAqC,QAAA;MAAA4B,OAAA;MAAAC,MAAA,GAAA1B,SAAA;IAAA,OAAAV,YAAA,YAAAW,IAAA,UAAA0B,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAA5H,IAAA;QAAA;UAC/DyD,OAGC,GAAAiE,MAAA,CAAArH,MAAA,QAAAqH,MAAA,QAAArE,SAAA,GAAAqE,MAAA,MAAG,CAAC,CAAC;UAAA,MAEF,OAAOjC,KAAK,KAAK,QAAQ;YAAAmC,SAAA,CAAA5H,IAAA;YAAA;UAAA;UAAAsH,eAAA,GAIvB7D,OAAO,CAFTmC,KAAK,EAALA,KAAK,GAAA0B,eAAA,cAAGhE,mCAAmC,GAAAgE,eAAA,EAAAC,qBAAA,GAEzC9D,OAAO,CADT+D,uBAAuB,EAAvBA,uBAAuB,GAAAD,qBAAA,cAAGhE,8BAA8B,GAAAgE,qBAAA;UAEpD/D,OAAO,OAAAqE,SAAA;YACX3C,EAAE,EAAE;cAAE4C,GAAG,EAAET,MAAM,CAACU;YAAO;UAAC,GACvBP,uBAAuB,oBAAvBA,uBAAuB,CAAEhE,OAAO;UAGrC,IAAIiC,KAAK,EAAE;YAETjC,OAAO,CAACwE,GAAG,GAAG,CAAC;cAAE9C,EAAE,EAAE;gBAAEmB,aAAa,EAAEZ;cAAM;YAAE,CAAC,EAAE;cAAEvE,IAAI,EAAE;gBAAEmF,aAAa,EAAEZ;cAAM;YAAE,CAAC,CAAC;UACtF;UAACmC,SAAA,CAAA5H,IAAA;UAAA,OAEsBqH,MAAM,CAACH,UAAU,CAEtC1D,OAAO,MAAAqE,SAAA;YACL3C,EAAE,EAAE;UAAC,GAAKsC,uBAAuB,oBAAvBA,uBAAuB,CAAE9D,IAAI,OAAAmE,SAAA;YACvCjC,KAAK,EAALA;UAAK,GAAK4B,uBAAuB,oBAAvBA,uBAAuB,CAAE/D,OAAO,CAC9C,CAAC;QAAA;UALKoC,QAAQ,GAAA+B,SAAA,CAAAtB,IAAA;UAMRzB,OAA2C,GAAG,EAAE;UACtDgB,QAAQ,CAAChB,KAAK,CAAC0B,OAAO,CAAC,UAAC3C,IAAI;YAAA,OAAKD,cAAc,CAACC,IAAI,CAAC,IAAIiB,OAAK,CAAC2B,IAAI,CAAC5C,IAAI,CAAC;UAAA,EAAC;UAC1E,IAAI8B,OAAO,IAAIb,OAAK,EAAE;YACpBa,OAAO,CAACb,OAAK,CAAC;UAChB;QAAC;QAAA;UAAA,OAAA+C,SAAA,CAAAnB,IAAA;MAAA;IAAA,GAAAW,QAAA;EAAA,CAEJ;EAAA,gBAtCKF,UAAUA,CAAAe,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAhB,KAAA,CAAAN,KAAA,OAAAb,SAAA;EAAA;AAAA,GAsCf;AAEM,IAAMoC,mBAAmB,GAAG,IAAArB,oBAAQ,EAACG,UAAU,EAAE,GAAG,EAAE;EAC3DF,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAAClF,OAAA,CAAAqG,mBAAA,GAAAA,mBAAA;AAEI,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,OAAgB;EAAA,OAAqBA,OAAO,KAAK,GAAG;AAAA;AAACvG,OAAA,CAAAsG,gBAAA,GAAAA,gBAAA;AAE/E,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAID,OAAgB;EAAA,OAAqBA,OAAO,KAAK,GAAG;AAAA;AAACvG,OAAA,CAAAwG,cAAA,GAAAA,cAAA;AAE7E,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIF,OAAgB;EAAA,OAAqBA,OAAO,KAAK,GAAG;AAAA;AAACvG,OAAA,CAAAyG,gBAAA,GAAAA,gBAAA;AAkG/E,IAAMC,uBAAyC,GAAG;EACvDC,MAAM,EAAE,SAAAA,OAACjD,KAAK,EAAK;IACjB,IAAMkD,OAAO,GAAG,EAAE;IAAC,IAAAC,KAAA,YAAAA,MAAAC,KAAA,EAEiB;MAClC,IAAIF,OAAO,CAACtI,MAAM,IAAI,EAAE;QAAAyI,CAAA,EAASH;MAAO;MACxC,IAAIE,KAAK,CAACE,KAAK,CAACC,IAAI,CAAC,UAAC9H,IAAI;QAAA,OAAKA,IAAI,CAAC+H,QAAQ,CAACxD,KAAK,CAAC;MAAA,EAAC,EAAE;QAEpD,IAAIoD,KAAK,CAACK,KAAK,EAAE;UACfP,OAAO,CAACnC,IAAI,KAAAqB,SAAA,iBACPgB,KAAK;YACR3H,IAAI,EAAK2H,KAAK,CAAC3H,IAAI,YAAS;YAC5BgI,KAAK,EAAE7F;UAAS,EACjB,CAAC;UACFwF,KAAK,CAACK,KAAK,CAAC3C,OAAO,CAAC,UAAC4C,IAAI,EAAEC,KAAK;YAAA,OAC9BT,OAAO,CAACnC,IAAI,KAAAqB,SAAA,iBACPgB,KAAK;cACR3H,IAAI,EAAK2H,KAAK,CAAC3H,IAAI,eAASkI,KAAK,GAAG,CAAC,CAAE;cACvCF,KAAK,EAAE7F,SAAS;cAChBgG,OAAO,EAAEF;YAAI,EACd,CAAC;UAAA,CACJ,CAAC;QACH,CAAC,MAAM;UACLR,OAAO,CAACnC,IAAI,CAACqC,KAAK,CAAC;QACrB;MACF;IACF,CAAC;IAtBD,SAAAS,SAAA,GAAA7J,+BAAA,CAAoB8J,yBAAc,GAAAC,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAA/I,IAAA;MAAA,IAAvBsI,KAAK,GAAAW,KAAA,CAAAhJ,KAAA;MAAA,IAAAiJ,IAAA,GAAAb,KAAA,CAAAC,KAAA;MAAA,QAAAa,QAAA,aAAAD,IAAA,uBAAAA,IAAA,CAAAX,CAAA;IAAA;IAwBhB,OAAOH,OAAO;EAChB;AACF,CAAC;AAAC5G,OAAA,CAAA0G,uBAAA,GAAAA,uBAAA;AAaK,IAAMkB,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,KAAA;EAAA,IAG7B9F,OAAO,GAAA8F,KAAA,CAAP9F,OAAO;IACPuD,MAAM,GAAAuC,KAAA,CAANvC,MAAM;IACNwC,gBAAgB,GAAAD,KAAA,CAAhBC,gBAAgB;IAChBC,mBAAmB,GAAAF,KAAA,CAAnBE,mBAAmB;EAAA,OACqE;IACxF,GAAG,EAAE;MACHC,YAAY,EAAE,SAAAA,aAACtE,KAAK,EAAEvC,IAAI,EAAEwC,OAAO,EAAmB;QAAA,IAAjBjC,OAAO,GAAAuC,SAAA,CAAA3F,MAAA,QAAA2F,SAAA,QAAA3C,SAAA,GAAA2C,SAAA,MAAG,CAAC,CAAC;QAC/C,IAAI9C,IAAI,CAAC8G,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE;QAEtC,IAAAC,eAAA,GAAwDxG,OAAO,CAAvDmC,KAAK;UAALA,KAAK,GAAAqE,eAAA,cAAG3G,mCAAmC,GAAA2G,eAAA;QACnD,IAAMC,gBAAgB,GAAG,CAACzE,KAAK,GAC3B5B,WAAW,CAACC,OAAO,CAAC,GACpBD,WAAW,CAACC,OAAO,CAAC,CAACQ,MAAM,CAAC,UAAC6F,OAAO;UAAA,IAAAC,aAAA;UAAA,OAAK3E,KAAK,IAAI,EAAA2E,aAAA,GAAAD,OAAO,CAACjJ,IAAI,qBAAZkJ,aAAA,CAAcJ,OAAO,CAACvE,KAAK,CAAC,MAAK,CAAC,CAAC;QAAA,EAAC;QAG1FyE,gBAAgB,CAACxG,IAAI,CAAC,UAAC2G,CAAC,EAAEC,CAAC,EAAK;UAAA,IAAAC,OAAA,EAAAC,OAAA;UAC9B,IAAIC,KAAK,GAAG,EAAAF,OAAA,GAAAF,CAAC,CAACnJ,IAAI,qBAANqJ,OAAA,CAAQG,WAAW,CAAC,CAAC,KAAI,EAAE;UACvC,IAAIC,KAAK,GAAG,EAAAH,OAAA,GAAAF,CAAC,CAACpJ,IAAI,qBAANsJ,OAAA,CAAQE,WAAW,CAAC,CAAC,KAAI,EAAE;UACvC,IAAIjF,KAAK,IAAIgF,KAAK,CAACT,OAAO,CAACvE,KAAK,CAAC,KAAK,CAAC,EAAE;YACvCgF,KAAK,SAAOA,KAAO;UACrB;UACA,IAAIhF,KAAK,IAAIkF,KAAK,CAACX,OAAO,CAACvE,KAAK,CAAC,KAAK,CAAC,EAAE;YACvCkF,KAAK,SAAOA,KAAO;UACrB;UACA,IAAIF,KAAK,GAAGE,KAAK,EAAE,OAAO,CAAC,CAAC;UAC5B,IAAIF,KAAK,GAAGE,KAAK,EAAE,OAAO,CAAC;UAE3B,OAAO,CAAC;QACV,CAAC,CAAC;QAEF,IAAMC,MAAM,GAAGV,gBAAgB,CAAClJ,KAAK,CAAC,CAAC,EAAE4E,KAAK,CAAC;QAE/C,IAAIF,OAAO,EAAE;UACXA,OAAO,CAACkF,MAAM,EAAEnF,KAAK,CAAC;QACxB;QAEA,OAAOmF,MAAM;MACf,CAAC;MACDC,MAAM,EAAE,SAAAA,OAACC,MAAM;QAAA,OAAM;UACnBC,aAAa,EAAE,MAAM;UACrBC,GAAG,OAAKF,MAAM,CAAC5J,IAAM;UACrBgC,IAAI,QAAM4H,MAAM,CAAC5J;QACnB,CAAC;MAAA,CAAC;MACF+B,IAAI,EAAE;IACR,CAAC;IACD,GAAG,EAAE;MACH8G,YAAY;QAAA,IAAAkB,aAAA,OAAA5F,kBAAA,aAAAC,YAAA,YAAAC,IAAA,CAAE,SAAA2F,SAAOzF,KAAK,EAAE0F,CAAC,EAAEzF,OAAO;UAAA,IAAA0F,qBAAA;UAAA,IAAAC,MAAA;UAAA,OAAA/F,YAAA,YAAAW,IAAA,UAAAqF,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAnF,IAAA,GAAAmF,SAAA,CAAAvL,IAAA;cAAA;gBAAA,IAC/ByF,KAAK;kBAAA8F,SAAA,CAAAvL,IAAA;kBAAA;gBAAA;gBAAA,OAAAuL,SAAA,CAAAC,MAAA,WAAS,EAAE;cAAA;gBAAAD,SAAA,CAAAvL,IAAA;gBAAA,OAEC6J,gBAAgB,oBAAhBA,gBAAgB,CAAEnB,MAAM,CAACjD,KAAK,CAAC;cAAA;gBAAA8F,SAAA,CAAAE,EAAA,GAAAL,qBAAA,GAAAG,SAAA,CAAAjF,IAAA;gBAAA,MAAAiF,SAAA,CAAAE,EAAA;kBAAAF,SAAA,CAAAvL,IAAA;kBAAA;gBAAA;gBAAAuL,SAAA,CAAAG,EAAA,GAAAN,qBAAA;gBAAAG,SAAA,CAAAvL,IAAA;gBAAA;cAAA;gBAAAuL,SAAA,CAAAG,EAAA,GAAK,EAAE;cAAA;gBAAtDL,MAAM,GAAAE,SAAA,CAAAG,EAAA;gBAEZ,IAAIhG,OAAO,EAAE;kBACXA,OAAO,CAAC2F,MAAM,EAAE5F,KAAK,CAAC;gBACxB;gBAAC,OAAA8F,SAAA,CAAAC,MAAA,WAEMH,MAAM;cAAA;cAAA;gBAAA,OAAAE,SAAA,CAAA9E,IAAA;YAAA;UAAA,GAAAyE,QAAA;QAAA,CACd;QAAA,SAAAnB,aAAA4B,GAAA,EAAAC,GAAA,EAAAC,GAAA;UAAA,OAAAZ,aAAA,CAAApE,KAAA,OAAAb,SAAA;QAAA;QAAA,OAAA+D,YAAA;MAAA;MACDc,MAAM,EAAE,SAAAA,OAACC,MAAM;QAAA,OAAM;UACnBC,aAAa,EAAE,MAAM;UACrBC,GAAG,EAAEF,MAAM,CAAC5J,IAAI;UAChBgC,IAAI,EAAE4H,MAAM,CAACzB;QACf,CAAC;MAAA,CAAC;MACFpG,IAAI,EAAE;IACR,CAAC;IACD,GAAG,EAAE;MACH6I,QAAQ,EAAE,SAAAA,SAACC,IAAI,EAAK;QAClBjC,mBAAmB,CAACiC,IAAI,CAAC;MAC3B,CAAC;MACDhC,YAAY,EAAE,SAAAA,aACZtE,KAAK,EACL0F,CAAC,EACDzF,OAAO,EAMJ;QAAA,IALHjC,OAAO,GAAAuC,SAAA,CAAA3F,MAAA,QAAA2F,SAAA,QAAA3C,SAAA,GAAA2C,SAAA,MAAG;UACRJ,KAAK,EAAEtC,mCAAmC;UAC1C0I,yBAAyB,EAAE,KAAK;UAChCxE,uBAAuB,EAAEjE;QAC3B,CAAC;QAED,IAAIE,OAAO,YAAPA,OAAO,CAAEuI,yBAAyB,EAAE;UACtC,OAAQ5D,mBAAmB,CACzBf,MAAM,EACN5B,KAAK,EACL,UAACwG,IAAI,EAAK;YACR,IAAIvG,OAAO,EAAE;cACXA,OAAO,CAACuG,IAAI,EAAExG,KAAK,CAAC;YACtB;UACF,CAAC,EACD;YACEG,KAAK,EAAEnC,OAAO,CAACmC,KAAK;YACpB4B,uBAAuB,EAAE/D,OAAO,CAAC+D;UACnC,CACF,CAAC;QACH;QAQA,IAAI,CAAC/B,KAAK,IAAI5E,MAAM,CAACwD,MAAM,CAACP,OAAO,CAACM,KAAK,CAACD,OAAO,CAAC,CAAC9D,MAAM,GAAG,GAAG,EAAE;UAC/D,IAAMwE,OAAK,GAAGD,qBAAqB,CAACd,OAAO,CAAC;UAE5C,IAAMoI,aAAa,GAAGrH,OAAK,CAACP,MAAM,CAAC,UAACV,IAAI,EAAK;YAAA,IAAAuI,UAAA;YAC3C,IAAI,CAAC1G,KAAK,EAAE,OAAO,IAAI;YACvB,IAAI,EAAA0G,UAAA,GAAAvI,IAAI,CAAC1C,IAAI,qBAATiL,UAAA,CAAWzB,WAAW,CAAC,CAAC,CAACV,OAAO,CAACvE,KAAK,CAACiF,WAAW,CAAC,CAAC,CAAC,MAAK,CAAC,CAAC,EAAE;cAChE,OAAO,IAAI;YACb;YACA,IAAI9G,IAAI,CAACsB,EAAE,CAACwF,WAAW,CAAC,CAAC,CAACV,OAAO,CAACvE,KAAK,CAACiF,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;cAC7D,OAAO,IAAI;YACb;YACA,OAAO,KAAK;UACd,CAAC,CAAC;UAEF,IAAMuB,KAAI,GAAGC,aAAa,CAAClL,KAAK,CAAC,CAAC,EAAEyC,OAAO,oBAAPA,OAAO,CAAEmC,KAAK,CAAC;UAEnD,IAAIF,OAAO,EAAE;YACXA,OAAO,CAACuG,KAAI,EAAExG,KAAK,CAAC;UACtB;UAEA,OAAOwG,KAAI;QACb;QAEA,OAAQnF,qBAAqB,CAC3BhD,OAAO,EACP2B,KAAK,EACL,UAACwG,IAAI,EAAK;UACR,IAAIvG,OAAO,EAAE;YACXA,OAAO,CAACuG,IAAI,EAAExG,KAAK,CAAC;UACtB;QACF,CAAC,EACD;UACEG,KAAK,EAAEnC,OAAO,CAACmC;QACjB,CACF,CAAC;MACH,CAAC;MACDiF,MAAM,EAAE,SAAAA,OAACC,MAAM;QAAA,OAAM;UACnBC,aAAa,EAAE,MAAM;UACrBC,GAAG,EAAEF,MAAM,CAAC5F,EAAE;UACdhC,IAAI,SAAM4H,MAAM,CAAC5J,IAAI,IAAI4J,MAAM,CAAC5F,EAAE;QACpC,CAAC;MAAA,CAAC;MACFjC,IAAI,EAAE;IACR;EACF,CAAC;AAAA,CAAC;AAAClB,OAAA,CAAA4H,kBAAA,GAAAA,kBAAA;AAEI,IAAMyC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,GAAW;EAAA,OAChD,CAACA,GAAG,CAACrC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAYqC,GAAG,GAAKA,GAAG,EAAEC,IAAI,CAAC,CAAC;AAAA;AAACvK,OAAA,CAAAqK,sBAAA,GAAAA,sBAAA;AAEnD,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIF,GAAY,EAAK;EACnD,IAAI,CAACA,GAAG,EAAE,OAAOA,GAAG;EAEpB,IAAMG,eAAe,GAAGH,GAAG,CAACrC,OAAO,CAAC,GAAG,CAAC;EACxC,IAAIwC,eAAe,KAAK,CAAC,CAAC,EAAE,OAAOH,GAAG;EAEtC,OAAOA,GAAG,CAACI,SAAS,CAAC,CAAC,EAAEJ,GAAG,CAACrC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC3C,CAAC;AAACjI,OAAA,CAAAwK,mBAAA,GAAAA,mBAAA;AAEK,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAIL,GAAW;EAAA,OAAKA,GAAG,CAACrC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;AAAA;AAACjI,OAAA,CAAA2K,UAAA,GAAAA,UAAA;AAE9D,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;EAAA,IAAItC,CAAC,GAAArE,SAAA,CAAA3F,MAAA,QAAA2F,SAAA,QAAA3C,SAAA,GAAA2C,SAAA,MAAG,EAAE;EAAA,OACrCqE,CAAC,GAEG,CAAC,CAACuC,MAAM,CAACvC,CAAC,CAAC,GAAIwC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAG,KAAMF,MAAM,CAACvC,CAAC,CAAC,GAAG,CAAE,EAAEtJ,QAAQ,CAAC,EAAE,CAAC,GACpE,CAAG,GAAG,SAAI,GAAG,SAAI,GAAG,SAAI,GAAG,SAAI,IAAI,EAAGgM,OAAO,CAAC,QAAQ,EAAEJ,gBAAgB,CAAC;AAAA;AAAC5K,OAAA,CAAA4K,gBAAA,GAAAA,gBAAA;AAKzE,IAAMK,aAAa,GAAG,SAAhBA,aAAaA,CAAI9J,IAAY,EAAK;EAC7C,IAAI;IAEF,IAAM+J,eAAe,GAAG,IAAAtI,mBAAA,aAAIzB,IAAI,CAACgK,QAAQ,CAAC,IAAAC,sBAAU,EAAC,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAE,CAAC;IAEjE,IAAMC,wBAAwB,GAAGnK,IAAI,CAACoK,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC;IAE3D,OACEL,eAAe,CAAC5M,MAAM,KAAK,CAAC,IAAI4M,eAAe,CAAC5M,MAAM,KAAKgN,wBAAwB,CAAChN,MAAM;EAE9F,CAAC,CAAC,OAAOkN,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC;AAACxL,OAAA,CAAAiL,aAAA,GAAAA,aAAA;AAOF,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAAC,KAAA;EAAA,IAGpBC,UAAU,GAAAD,KAAA,CAAVC,UAAU;IACVC,gBAAgB,GAAAF,KAAA,CAAhBE,gBAAgB;IAChBC,WAAW,GAAAH,KAAA,CAAXG,WAAW;IACXC,MAAM,GAAAJ,KAAA,CAANI,MAAM;IACN5K,IAAI,GAAAwK,KAAA,CAAJxK,IAAI;IACJ6K,UAAU,GAAAL,KAAA,CAAVK,UAAU;EAAA,YAEP7K,IAAI,GAAGyK,UAAU,IAClBC,gBAAgB,GAAGA,gBAAgB,CAACnJ,GAAG,CAAC,UAAAuJ,KAAA;IAAA,IAAG9K,IAAI,GAAA8K,KAAA,CAAJ9K,IAAI;IAAA,OAAOA,IAAI;EAAA,EAAC,CAACmK,IAAI,CAAC,CAAC,GAAG,EAAE,IACtEQ,WAAW,GAAGC,MAAM,IAAG,CAAAC,UAAU,oBAAVA,UAAU,CAAEE,WAAW,oBAAvBF,UAAU,CAAEE,WAAW,CAAG,CAAC,KAAIF,UAAU;AAAA,CAAE;AAOhE,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAGjCC,QAAqD;EAAA,OAC1CA,QAAQ,CAAC1J,GAAG,CAACgJ,gBAAgB,CAAC,CAACJ,IAAI,CAAC,CAAC;AAAA;AAACrL,OAAA,CAAAkM,sBAAA,GAAAA,sBAAA"}