{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_useMessageList2","_useShouldScrollToRecentOnNewOwnMessage","_InlineLoadingMoreIndicator","_InlineLoadingMoreRecentIndicator","_InlineLoadingMoreThreadIndicator","_getLastReceivedMessage","_AttachmentPickerContext","_ChannelContext","_ChatContext","_DebugContext","_ImageGalleryContext","_MessagesContext","_OverlayContext","_PaginatedMessageListContext","_ThemeContext","_ThreadContext","_TranslationContext","_excluded","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","WAIT_FOR_SCROLL_TO_OFFSET_TIMEOUT","MAX_RETRIES_AFTER_SCROLL_FAILURE","styles","StyleSheet","create","container","alignItems","flex","width","contentContainer","flexGrow","paddingBottom","invert","transform","scaleY","invertAndroid","scaleX","listContainer","stickyHeader","position","top","InvertedCellRendererComponent","props","createElement","View","_extends2","style","__self","__source","fileName","lineNumber","columnNumber","keyExtractor","item","id","created_at","toISOString","Date","now","toString","flatListViewabilityConfig","viewAreaCoveragePercentThreshold","MessageListWithContext","_getLastReceivedMessa","LoadingMoreIndicator","threadList","InlineLoadingMoreThreadIndicator","InlineLoadingMoreIndicator","additionalFlatListProps","channel","client","closePicker","DateHeader","disabled","disableTypingIndicator","EmptyStateIndicator","FlatList","_props$FooterComponen","FooterComponent","hasNoMoreRecentMessagesToLoad","_props$HeaderComponen","HeaderComponent","InlineLoadingMoreRecentIndicator","hideStickyDateHeader","initialScrollToFirstUnreadMessage","InlineDateSeparator","InlineUnreadIndicator","_props$inverted","inverted","_props$isListActive","isListActive","legacyImageViewerSwipeBehaviour","loadChannelAroundMessage","loading","LoadingIndicator","loadMore","loadMoreRecent","loadMoreThread","markRead","Message","MessageSystem","myMessageTheme","NetworkDownIndicator","noGroupByUser","onListScroll","onThreadSelect","overlay","reloadChannel","ScrollToBottomButton","selectedPicker","setFlatListRef","setMessages","setSelectedPicker","setTargetedMessage","StickyHeader","targetedMessage","tDateTimeParser","thread","_props$threadList","TypingIndicator","TypingIndicatorContainer","_useTheme","useTheme","theme","white_snow","colors","_theme$messageList","messageList","messageContainer","screenPadding","myMessageThemeString","useMemo","JSON","stringify","modifiedTheme","mergeThemes","_useMessageList","useMessageList","processedMessageList","rawMessageList","messageListLengthBeforeUpdate","useRef","messageListLengthAfterUpdate","length","topMessageBeforeUpdate","latestNonCurrentMessageBeforeUpdateRef","topMessageAfterUpdate","shouldScrollToRecentOnNewOwnMessageRef","useShouldScrollToRecentOnNewOwnMessage","userID","_useState","useState","_useState2","_slicedToArray2","autoscrollToRecent","setAutoscrollToRecent","onStartReachedTracker","onEndReachedTracker","onStartReachedInPromise","onEndReachedInPromise","flatListRef","_useState3","_useState4","isInitialScrollDone","setInitialScrollDone","channelResyncScrollSet","scrollToDebounceTimeoutRef","initialScrollSettingTimeoutRef","onScrollEventTimeoutRef","messageIdLastScrolledToRef","_useState5","_useState6","hasMoved","setHasMoved","_useState7","getLastReceivedMessage","_useState8","lastReceivedId","setLastReceivedId","_useState9","_useState10","scrollToBottomButtonVisible","setScrollToBottomButtonVisible","_useState11","_useState12","stickyHeaderDate","setStickyHeaderDate","stickyHeaderDateRef","channelRef","current","updateStickyHeaderDateIfNeeded","viewableItems","_lastItem$item","_stickyHeaderDateRef$","lastItem","pop","isMessageTypeDeleted","type","toDateString","onViewableItemsChanged","_ref","Platform","OS","resetPaginationTrackersRef","useEffect","getShouldMarkReadAutomatically","countUnread","lastReceivedMessage","scrollToBottomIfNeeded","_topMessageBeforeUpda","isMessageRemovedFromMessageList","setTimeout","_flatListRef$current","scrollToOffset","offset","maybeCallOnStartReached","notLatestSet","state","messages","latestMessages","latestNonCurrentMessageBeforeUpdate","undefined","latestCurrentMessageAfterUpdate","didMergeMessageSetsWithNoUpdates","shouldScrollToRecentOnNewOwnMessage","_flatListRef$current2","animated","shouldApplyAndroidWorkaround","renderItem","_ref2","_message$user","index","message","disconnected","initialized","offlineMode","unreadCount","lastRead","isMessageUnread","messageArrayIndex","isLatestMessageSetShown","messageSets","find","isCurrent","isLatest","msg","isCurrentMessageUnread","showUnreadUnderlay","muteStatus","muted","insertInlineUnreadIndicator","Fragment","testID","paddingHorizontal","wrapMessageInTheme","user","renderDateSeperator","isMessageWithStylesReadByAndDateSeparator","dateSeparator","date","renderMessage","goToMessage","groupStyles","isTargetedMessage","quoted_message_id","ThemeProvider","mergedStyle","_ref3","_asyncToGenerator2","_regenerator","mark","_callee","limit","callback","onError","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","then","stop","_x","apply","arguments","maybeCallOnEndReached","_ref4","_callee2","_callee2$","_context2","onUserScrollEvent","event","nativeEvent","clearTimeout","contentOffset","y","visibleLength","layoutMeasurement","height","contentLength","contentSize","isScrollAtStart","isScrollAtEnd","handleScroll","isScrollAtBottom","showScrollToBottomButton","shouldMarkRead","goToNewMessages","_ref5","_callee3","isNotLatestSet","_callee3$","_context3","scrollToIndexFailedRetryCountRef","failScrollTimeoutId","onScrollToIndexFailedRef","info","averageItemLength","_flatListRef$current3","scrollToIndex","viewPosition","e","messageId","indexOfParentInMessageList","findIndex","messageIdToScroll","messagesWithImages","filter","attachments","some","attachment","title_link","og_scrape_url","image_url","thumb_url","imageString","map","_message$attachments","join","numberOfMessagesWithImages","threadExists","stickyHeaderFormatDate","getFullYear","tStickyHeaderDate","stickyHeaderDateString","isDayOrMoment","format","dismissImagePicker","onScrollBeginDrag","onScrollEndDrag","refCallback","ref","debugRef","useDebugContext","isDebugModeEnabled","__DEV__","setEventType","setSendEventParams","action","data","renderListEmptyComponent","useCallback","listType","ListFooterComponent","ListHeaderComponent","StickyHeaderComponent","dateString","additionalFlatListPropsExcludingStyle","contentContainerStyle","rest","_objectWithoutProperties2","backgroundColor","CellRendererComponent","extraData","keyboardShouldPersistTaps","ListEmptyComponent","maintainVisibleContentPosition","autoscrollToTopThreshold","minIndexForVisible","maxToRenderPerBatch","onMomentumScrollEnd","onScroll","onScrollToIndexFailed","onTouchEnd","scrollEnabled","showsVerticalScrollIndicator","viewabilityConfig","onPress","showNotification","MessageList","_useAttachmentPickerC","useAttachmentPickerContext","_useChannelContext","useChannelContext","enableMessageGroupingByUser","error","isChannelActive","scrollToFirstUnreadThreshold","_useChatContext","useChatContext","_useImageGalleryConte","useImageGalleryContext","_useMessagesContext","useMessagesContext","_usePaginatedMessageL","usePaginatedMessageListContext","_useOverlayContext","useOverlayContext","_useThreadContext","useThreadContext","_useTranslationContex","useTranslationContext","t","exports"],"sources":["MessageList.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  FlatListProps,\n  FlatList as FlatListType,\n  Platform,\n  ScrollViewProps,\n  StyleSheet,\n  View,\n  ViewToken,\n} from 'react-native';\n\nimport type { FormatMessageResponse } from 'stream-chat';\n\nimport {\n  isMessageWithStylesReadByAndDateSeparator,\n  MessageType,\n  useMessageList,\n} from './hooks/useMessageList';\nimport { useShouldScrollToRecentOnNewOwnMessage } from './hooks/useShouldScrollToRecentOnNewOwnMessage';\n\nimport { InlineLoadingMoreIndicator } from './InlineLoadingMoreIndicator';\nimport { InlineLoadingMoreRecentIndicator } from './InlineLoadingMoreRecentIndicator';\nimport { InlineLoadingMoreThreadIndicator } from './InlineLoadingMoreThreadIndicator';\nimport { getLastReceivedMessage } from './utils/getLastReceivedMessage';\n\nimport {\n  AttachmentPickerContextValue,\n  useAttachmentPickerContext,\n} from '../../contexts/attachmentPickerContext/AttachmentPickerContext';\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport { ChatContextValue, useChatContext } from '../../contexts/chatContext/ChatContext';\nimport { useDebugContext } from '../../contexts/debugContext/DebugContext';\nimport {\n  ImageGalleryContextValue,\n  useImageGalleryContext,\n} from '../../contexts/imageGalleryContext/ImageGalleryContext';\nimport {\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\nimport {\n  OverlayContextValue,\n  useOverlayContext,\n} from '../../contexts/overlayContext/OverlayContext';\nimport {\n  PaginatedMessageListContextValue,\n  usePaginatedMessageListContext,\n} from '../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport { mergeThemes, ThemeProvider, useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport {\n  isDayOrMoment,\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst WAIT_FOR_SCROLL_TO_OFFSET_TIMEOUT = 150;\nconst MAX_RETRIES_AFTER_SCROLL_FAILURE = 10;\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    width: '100%',\n  },\n  contentContainer: {\n    flexGrow: 1,\n    /**\n     * paddingBottom is set to 4 to account for the default date\n     * header and inline indicator alignment. The top margin is 8\n     * on the header but 4 on the inline date, this adjusts the spacing\n     * to allow the \"first\" inline date to align with the date header.\n     */\n    paddingBottom: 4,\n  },\n  flex: { flex: 1 },\n  invert: { transform: [{ scaleY: -1 }] },\n  invertAndroid: {\n    // Invert the Y AND X axis to prevent a react native issue that can lead to ANRs on android 13\n    // details: https://github.com/Expensify/App/pull/12820\n    transform: [{ scaleX: -1 }, { scaleY: -1 }],\n  },\n  listContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  stickyHeader: {\n    position: 'absolute',\n    top: 0,\n  },\n});\n\nconst InvertedCellRendererComponent = (props: React.PropsWithChildren<unknown>) => (\n  <View {...props} style={styles.invertAndroid} />\n);\n\nconst keyExtractor = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  item: MessageType<StreamChatGenerics>,\n) => {\n  if (item.id) return item.id;\n  if (item.created_at)\n    return typeof item.created_at === 'string' ? item.created_at : item.created_at.toISOString();\n  return Date.now().toString();\n};\n\nconst flatListViewabilityConfig = {\n  viewAreaCoveragePercentThreshold: 1,\n};\n\ntype MessageListPropsWithContext<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<AttachmentPickerContextValue, 'closePicker' | 'selectedPicker' | 'setSelectedPicker'> &\n  Pick<\n    ChannelContextValue<StreamChatGenerics>,\n    | 'channel'\n    | 'disabled'\n    | 'EmptyStateIndicator'\n    | 'hideStickyDateHeader'\n    | 'loadChannelAroundMessage'\n    | 'loading'\n    | 'LoadingIndicator'\n    | 'markRead'\n    | 'NetworkDownIndicator'\n    | 'reloadChannel'\n    | 'scrollToFirstUnreadThreshold'\n    | 'setTargetedMessage'\n    | 'StickyHeader'\n    | 'targetedMessage'\n    | 'threadList'\n  > &\n  Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Pick<ImageGalleryContextValue<StreamChatGenerics>, 'setMessages'> &\n  Pick<\n    PaginatedMessageListContextValue<StreamChatGenerics>,\n    'hasNoMoreRecentMessagesToLoad' | 'loadMore' | 'loadMoreRecent'\n  > &\n  Pick<OverlayContextValue, 'overlay'> &\n  Pick<\n    MessagesContextValue<StreamChatGenerics>,\n    | 'DateHeader'\n    | 'disableTypingIndicator'\n    | 'FlatList'\n    | 'initialScrollToFirstUnreadMessage'\n    | 'InlineDateSeparator'\n    | 'InlineUnreadIndicator'\n    | 'legacyImageViewerSwipeBehaviour'\n    | 'Message'\n    | 'ScrollToBottomButton'\n    | 'MessageSystem'\n    | 'myMessageTheme'\n    | 'TypingIndicator'\n    | 'TypingIndicatorContainer'\n  > &\n  Pick<ThreadContextValue<StreamChatGenerics>, 'loadMoreThread' | 'thread'> &\n  Pick<TranslationContextValue, 't' | 'tDateTimeParser'> & {\n    /**\n     * Besides existing (default) UX behavior of underlying FlatList of MessageList component, if you want\n     * to attach some additional props to underlying FlatList, you can add it to following prop.\n     *\n     * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n     *\n     * **NOTE** Don't use `additionalFlatListProps` to get access to ref of flatlist. Use `setFlatListRef` instead.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  additionalFlatListProps={{ bounces: true, keyboardDismissMode: true }} />\n     * ```\n     */\n    additionalFlatListProps?: Partial<FlatListProps<MessageType<StreamChatGenerics>>>;\n    /**\n     * UI component for footer of message list. By default message list will use `InlineLoadingMoreIndicator`\n     * as FooterComponent. If you want to implement your own inline loading indicator, you can access `loadingMore`\n     * from context.\n     *\n     * This is a [ListHeaderComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header by default if inverted is true or defaulted\n     */\n    FooterComponent?: React.ComponentType;\n    /**\n     * UI component for header of message list. By default message list will use `InlineLoadingMoreRecentIndicator`\n     * as HeaderComponent. If you want to implement your own inline loading indicator, you can access `loadingMoreRecent`\n     * from context.\n     *\n     * This is a [ListFooterComponent](https://facebook.github.io/react-native/docs/flatlist#listheadercomponent) of FlatList\n     * used in MessageList. Should be used for header if inverted is false\n     */\n    HeaderComponent?: React.ComponentType;\n    /** Whether or not the FlatList is inverted. Defaults to true */\n    inverted?: boolean;\n    isListActive?: boolean;\n    /** Turn off grouping of messages by user */\n    noGroupByUser?: boolean;\n    onListScroll?: ScrollViewProps['onScroll'];\n    /**\n     * Handler to open the thread on message. This is callback for touch event for replies button.\n     *\n     * @param message A message object to open the thread upon.\n     */\n    onThreadSelect?: (message: ThreadContextValue<StreamChatGenerics>['thread']) => void;\n    /**\n     * Use `setFlatListRef` to get access to ref to inner FlatList.\n     *\n     * e.g.\n     * ```js\n     * <MessageList\n     *  setFlatListRef={(ref) => {\n     *    // Use ref for your own good\n     *  }}\n     * ```\n     */\n    setFlatListRef?: (ref: FlatListType<MessageType<StreamChatGenerics>> | null) => void;\n  };\n\n/**\n * The message list component renders a list of messages. It consumes the following contexts:\n *\n * [ChannelContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/channel-context/)\n * [ChatContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/chat-context/)\n * [MessagesContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/messages-context/)\n * [ThreadContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/thread-context/)\n * [TranslationContext](https://getstream.io/chat/docs/sdk/reactnative/contexts/translation-context/)\n */\nconst MessageListWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageListPropsWithContext<StreamChatGenerics>,\n) => {\n  const LoadingMoreIndicator = props.threadList\n    ? InlineLoadingMoreThreadIndicator\n    : InlineLoadingMoreIndicator;\n  const {\n    additionalFlatListProps,\n    channel,\n    client,\n    closePicker,\n    DateHeader,\n    disabled,\n    disableTypingIndicator,\n    EmptyStateIndicator,\n    FlatList,\n    FooterComponent = LoadingMoreIndicator,\n    hasNoMoreRecentMessagesToLoad,\n    HeaderComponent = InlineLoadingMoreRecentIndicator,\n    hideStickyDateHeader,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    inverted = true,\n    isListActive = false,\n    legacyImageViewerSwipeBehaviour,\n    loadChannelAroundMessage,\n    loading,\n    LoadingIndicator,\n    loadMore,\n    loadMoreRecent,\n    loadMoreThread,\n    markRead,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    NetworkDownIndicator,\n    noGroupByUser,\n    onListScroll,\n    onThreadSelect,\n    overlay,\n    reloadChannel,\n    ScrollToBottomButton,\n    selectedPicker,\n    setFlatListRef,\n    setMessages,\n    setSelectedPicker,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    tDateTimeParser,\n    thread,\n    threadList = false,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = props;\n\n  const { theme } = useTheme();\n\n  const {\n    colors: { white_snow },\n    messageList: { container, contentContainer, listContainer, messageContainer },\n    screenPadding,\n  } = theme;\n\n  const myMessageThemeString = useMemo(() => JSON.stringify(myMessageTheme), [myMessageTheme]);\n\n  const modifiedTheme = useMemo(\n    () => mergeThemes({ style: myMessageTheme, theme }),\n    [myMessageThemeString, theme],\n  );\n\n  /**\n   * NOTE: rawMessageList changes only when messages array state changes\n   * processedMessageList changes on any state change\n   */\n  const { processedMessageList, rawMessageList } = useMessageList<StreamChatGenerics>({\n    noGroupByUser,\n    threadList,\n  });\n  const messageListLengthBeforeUpdate = useRef(0);\n  const messageListLengthAfterUpdate = processedMessageList.length;\n\n  /**\n   * We need topMessage and channelLastRead values to set the initial scroll position.\n   * So these values only get used if `initialScrollToFirstUnreadMessage` prop is true.\n   */\n  const topMessageBeforeUpdate = useRef<FormatMessageResponse<StreamChatGenerics>>();\n  const latestNonCurrentMessageBeforeUpdateRef =\n    useRef<FormatMessageResponse<StreamChatGenerics>>();\n  const topMessageAfterUpdate: FormatMessageResponse<StreamChatGenerics> | undefined =\n    rawMessageList[0];\n\n  const shouldScrollToRecentOnNewOwnMessageRef = useShouldScrollToRecentOnNewOwnMessage(\n    rawMessageList,\n    client.userID,\n  );\n\n  const [autoscrollToRecent, setAutoscrollToRecent] = useState(false);\n\n  /**\n   * We want to call onEndReached and onStartReached only once, per content length.\n   * We keep track of calls to these functions per content length, with following trackers.\n   */\n  const onStartReachedTracker = useRef<Record<number, boolean>>({});\n  const onEndReachedTracker = useRef<Record<number, boolean>>({});\n\n  const onStartReachedInPromise = useRef<Promise<void> | null>(null);\n  const onEndReachedInPromise = useRef<Promise<void> | null>(null);\n\n  const flatListRef = useRef<FlatListType<MessageType<StreamChatGenerics>> | null>(null);\n\n  /**\n   * Flag to track if the initial scroll has been set\n   * If the prop `initialScrollToFirstUnreadMessage` was enabled, then we scroll to the unread msg and set it to true\n   * If not, the default offset of 0 for flatList means that it has been set already\n   */\n  const [isInitialScrollDone, setInitialScrollDone] = useState(!initialScrollToFirstUnreadMessage);\n  const channelResyncScrollSet = useRef<boolean>(true);\n\n  /**\n   * The timeout id used to debounce our scrollToIndex calls on messageList updates\n   */\n  const scrollToDebounceTimeoutRef = useRef<NodeJS.Timeout>();\n\n  /**\n   * The timeout id used to lazier load the initial scroll set flag\n   */\n  const initialScrollSettingTimeoutRef = useRef<NodeJS.Timeout>();\n\n  /**\n   * The timeout id used to temporarily load the initial scroll set flag\n   */\n  const onScrollEventTimeoutRef = useRef<NodeJS.Timeout>();\n\n  /**\n   * Last messageID that was scrolled to after loading a new message list,\n   * this flag keeps track of it so that we dont scroll to it again on target message set\n   */\n  const messageIdLastScrolledToRef = useRef<string>();\n  const [hasMoved, setHasMoved] = useState(false);\n  const [lastReceivedId, setLastReceivedId] = useState(\n    getLastReceivedMessage(processedMessageList)?.id,\n  );\n  const [scrollToBottomButtonVisible, setScrollToBottomButtonVisible] = useState(false);\n\n  const [stickyHeaderDate, setStickyHeaderDate] = useState<Date | undefined>();\n  const stickyHeaderDateRef = useRef<Date | undefined>();\n\n  // ref for channel to use in useEffect without triggering it on channel change\n  const channelRef = useRef(channel);\n  channelRef.current = channel;\n\n  const updateStickyHeaderDateIfNeeded = (viewableItems: ViewToken[]) => {\n    if (viewableItems.length) {\n      const lastItem = viewableItems.pop() as {\n        item: MessageType<StreamChatGenerics>;\n      };\n\n      const isMessageTypeDeleted = lastItem.item.type === 'deleted';\n\n      if (\n        lastItem?.item?.created_at &&\n        !isMessageTypeDeleted &&\n        typeof lastItem.item.created_at !== 'string' &&\n        lastItem.item.created_at.toDateString() !== stickyHeaderDateRef.current?.toDateString()\n      ) {\n        stickyHeaderDateRef.current = lastItem.item.created_at;\n        setStickyHeaderDate(lastItem.item.created_at);\n      }\n    }\n  };\n\n  /**\n   * FlatList doesn't accept changeable function for onViewableItemsChanged prop.\n   * Thus useRef.\n   */\n  const onViewableItemsChanged = useRef(\n    ({ viewableItems }: { viewableItems: ViewToken[] | undefined }) => {\n      /**\n       * When a new message comes in, list scrolls down to the bottom automatically (using prop `maintainVisibleContentPosition`)\n       * and we mark the channel as read from handleScroll function.\n       * Although this logic is dependent on the fact that `onScroll` event gets triggered during this process.\n       * But for Android, this event is not triggered when messages length is lesser than visible screen height.\n       *\n       * And thus we need to check if the message list length is lesser than visible screen height and mark the channel as read.\n       */\n      if (\n        Platform.OS === 'android' &&\n        viewableItems?.length &&\n        viewableItems?.length >= messageListLengthBeforeUpdate.current\n      ) {\n        channel.markRead();\n      }\n\n      if (viewableItems && !hideStickyDateHeader) {\n        updateStickyHeaderDateIfNeeded(viewableItems);\n      }\n    },\n  );\n\n  /**\n   * Resets the pagination trackers, doing so cancels currently scheduled loading more calls\n   */\n  const resetPaginationTrackersRef = useRef(() => {\n    onStartReachedTracker.current = {};\n    onEndReachedTracker.current = {};\n  });\n\n  useEffect(() => {\n    if (disabled) {\n      setScrollToBottomButtonVisible(false);\n    }\n  }, [disabled]);\n\n  useEffect(() => {\n    const getShouldMarkReadAutomatically = (): boolean => {\n      if (loading || !channel) {\n        // nothing to do\n        return false;\n      } else if (channel.countUnread() > 0) {\n        if (!initialScrollToFirstUnreadMessage) {\n          /*\n           * In this case MessageList won't scroll to first unread message when opened, so we can mark\n           * the channel as read right after opening.\n           * */\n          return true;\n        } else {\n          /*\n           * In this case MessageList will be opened to first unread message.\n           * But if there are were not enough unread messages, so that scrollToBottom button was not shown\n           * then MessageList won't need to scroll up. So we can safely mark the channel as read right after opening.\n           *\n           * NOTE: we must ensure that initial scroll is done, otherwise we do not wait till the unread scroll is finished\n           * */\n          if (scrollToBottomButtonVisible) return false;\n          /* if scrollToBottom button was not visible, wait till\n           * - initial scroll is done (indicates that if scrolling to index was needed it was triggered)\n           * */\n          return isInitialScrollDone;\n        }\n      }\n      return false;\n    };\n\n    if (getShouldMarkReadAutomatically()) {\n      markRead();\n    }\n  }, [loading, scrollToBottomButtonVisible, isInitialScrollDone]);\n\n  useEffect(() => {\n    const lastReceivedMessage = getLastReceivedMessage(processedMessageList);\n    setLastReceivedId(lastReceivedMessage?.id);\n\n    /**\n     * Scroll down when\n     * created_at timestamp of top message before update is lesser than created_at timestamp of top message after update - channel has resynced\n     */\n    const scrollToBottomIfNeeded = () => {\n      if (!client || !channel || rawMessageList.length === 0) {\n        return;\n      }\n      /**\n       * Condition to check if a message is removed from MessageList.\n       * Eg: This would happen when giphy search is cancelled, etc.\n       * If such a case arises, we scroll to bottom.\n       */\n      const isMessageRemovedFromMessageList =\n        messageListLengthAfterUpdate < messageListLengthBeforeUpdate.current;\n      if (\n        isMessageRemovedFromMessageList ||\n        (topMessageBeforeUpdate.current?.created_at &&\n          topMessageAfterUpdate?.created_at &&\n          topMessageBeforeUpdate.current.created_at < topMessageAfterUpdate.created_at)\n      ) {\n        channelResyncScrollSet.current = false;\n        setScrollToBottomButtonVisible(false);\n        resetPaginationTrackersRef.current();\n\n        setTimeout(() => {\n          flatListRef.current?.scrollToOffset({\n            offset: 0,\n          });\n        }, 50);\n        setTimeout(() => {\n          channelResyncScrollSet.current = true;\n          if (channel.countUnread() > 0) {\n            markRead();\n          }\n        }, 500);\n      }\n    };\n\n    if (threadList || hasNoMoreRecentMessagesToLoad) {\n      scrollToBottomIfNeeded();\n    } else {\n      setScrollToBottomButtonVisible(true);\n    }\n\n    if (\n      !hasNoMoreRecentMessagesToLoad &&\n      flatListRef.current &&\n      messageListLengthBeforeUpdate.current === 0 &&\n      messageListLengthAfterUpdate < 10\n    ) {\n      /**\n       * Trigger onStartReached on first load, if messages are not enough to fill the screen.\n       * This is important especially for android, where you can't overscroll.\n       */\n      maybeCallOnStartReached(10);\n    }\n\n    messageListLengthBeforeUpdate.current = messageListLengthAfterUpdate;\n    topMessageBeforeUpdate.current = topMessageAfterUpdate;\n  }, [\n    threadList,\n    hasNoMoreRecentMessagesToLoad,\n    messageListLengthAfterUpdate,\n    topMessageAfterUpdate?.id,\n  ]);\n\n  useEffect(() => {\n    if (!rawMessageList.length) return;\n    if (threadList) {\n      setAutoscrollToRecent(true);\n      return;\n    }\n    const notLatestSet = channel.state.messages !== channel.state.latestMessages;\n    if (notLatestSet) {\n      latestNonCurrentMessageBeforeUpdateRef.current =\n        channel.state.latestMessages[channel.state.latestMessages.length - 1];\n      setAutoscrollToRecent(false);\n      setScrollToBottomButtonVisible(true);\n      return;\n    }\n    const latestNonCurrentMessageBeforeUpdate = latestNonCurrentMessageBeforeUpdateRef.current;\n    latestNonCurrentMessageBeforeUpdateRef.current = undefined;\n    const latestCurrentMessageAfterUpdate = rawMessageList[rawMessageList.length - 1];\n    if (!latestCurrentMessageAfterUpdate) {\n      setAutoscrollToRecent(true);\n      return;\n    }\n    const didMergeMessageSetsWithNoUpdates =\n      latestNonCurrentMessageBeforeUpdate?.id === latestCurrentMessageAfterUpdate.id;\n    // if didMergeMessageSetsWithNoUpdates=false, we got new messages\n    // so we should scroll to bottom if we are near the bottom already\n    setAutoscrollToRecent(!didMergeMessageSetsWithNoUpdates);\n\n    if (!didMergeMessageSetsWithNoUpdates) {\n      const shouldScrollToRecentOnNewOwnMessage = shouldScrollToRecentOnNewOwnMessageRef.current();\n      // we should scroll to bottom where ever we are now\n      // as we have sent a new own message\n      if (shouldScrollToRecentOnNewOwnMessage) {\n        setTimeout(() => {\n          flatListRef.current?.scrollToOffset({\n            animated: true,\n            offset: 0,\n          });\n        }, 150); // flatlist might take a bit to update, so a small delay is needed\n      }\n    }\n  }, [rawMessageList, threadList]);\n\n  // TODO: do not apply on RN 0.73 and above\n  const shouldApplyAndroidWorkaround = inverted && Platform.OS === 'android';\n\n  const renderItem = ({\n    index,\n    item: message,\n  }: {\n    index: number;\n    item: MessageType<StreamChatGenerics>;\n  }) => {\n    if (!channel || channel.disconnected || (!channel.initialized && !channel.offlineMode))\n      return null;\n\n    const unreadCount = channel.countUnread();\n    const lastRead = channel.lastRead();\n\n    function isMessageUnread(messageArrayIndex: number): boolean {\n      const isLatestMessageSetShown = !!channel.state.messageSets.find(\n        (set) => set.isCurrent && set.isLatest,\n      );\n      const msg = processedMessageList?.[messageArrayIndex];\n      if (!isLatestMessageSetShown) {\n        if (\n          channel.state.latestMessages.length !== 0 &&\n          unreadCount > channel.state.latestMessages.length\n        ) {\n          return messageArrayIndex <= unreadCount - channel.state.latestMessages.length - 1;\n        } else if (lastRead && msg.created_at) {\n          return lastRead < msg.created_at;\n        }\n        return false;\n      } else {\n        return messageArrayIndex <= unreadCount - 1;\n      }\n    }\n\n    const isCurrentMessageUnread = isMessageUnread(index);\n    const showUnreadUnderlay =\n      !channel.muteStatus().muted && isCurrentMessageUnread && scrollToBottomButtonVisible;\n    const insertInlineUnreadIndicator = showUnreadUnderlay && !isMessageUnread(index + 1); // show only if previous message is read\n\n    if (message.type === 'system') {\n      return (\n        <>\n          <View testID={`message-list-item-${index}`}>\n            <MessageSystem\n              message={message}\n              style={[{ paddingHorizontal: screenPadding }, messageContainer]}\n            />\n          </View>\n          {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n        </>\n      );\n    }\n\n    const wrapMessageInTheme = client.userID === message.user?.id && !!myMessageTheme;\n    const renderDateSeperator = isMessageWithStylesReadByAndDateSeparator(message) &&\n      message.dateSeparator && <InlineDateSeparator date={message.dateSeparator} />;\n    const renderMessage = (\n      <Message\n        goToMessage={goToMessage}\n        groupStyles={isMessageWithStylesReadByAndDateSeparator(message) ? message.groupStyles : []}\n        isTargetedMessage={targetedMessage === message.id}\n        lastReceivedId={\n          lastReceivedId === message.id || message.quoted_message_id ? lastReceivedId : undefined\n        }\n        message={message}\n        onThreadSelect={onThreadSelect}\n        showUnreadUnderlay={showUnreadUnderlay}\n        style={[{ paddingHorizontal: screenPadding }, messageContainer]}\n        threadList={threadList}\n      />\n    );\n    return wrapMessageInTheme ? (\n      <>\n        {shouldApplyAndroidWorkaround && renderDateSeperator}\n        <ThemeProvider mergedStyle={modifiedTheme}>\n          <View testID={`message-list-item-${index}`}>{renderMessage}</View>\n        </ThemeProvider>\n        {!shouldApplyAndroidWorkaround && renderDateSeperator}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    ) : (\n      <>\n        <View testID={`message-list-item-${index}`}>\n          {shouldApplyAndroidWorkaround && renderDateSeperator}\n          {renderMessage}\n        </View>\n        {!shouldApplyAndroidWorkaround && renderDateSeperator}\n        {/* Adding indicator below the messages, since the list is inverted */}\n        {insertInlineUnreadIndicator && <InlineUnreadIndicator />}\n      </>\n    );\n  };\n\n  /**\n   * We are keeping full control on message pagination, and not relying on react-native for it.\n   * The reasons being,\n   * 1. FlatList doesn't support onStartReached prop\n   * 2. `onEndReached` function prop available on react-native, gets executed\n   *    once per content length (and thats actually a nice optimization strategy).\n   *    But it also means, we always need to prioritize onEndReached above our\n   *    logic for `onStartReached`.\n   * 3. `onEndReachedThreshold` prop decides - at which scroll position to call `onEndReached`.\n   *    Its a factor of content length (which is necessary for \"real\" infinite scroll). But on\n   *    the other hand, it also makes calls to `onEndReached` (and this `channel.query`) way\n   *    too early during scroll, which we don't really need. So we are going to instead\n   *    keep some fixed offset distance, to decide when to call `loadMore` or `loadMoreRecent`.\n   *\n   * We are still gonna keep the optimization, which react-native does - only call onEndReached\n   * once per content length.\n   */\n\n  /**\n   * 1. Makes a call to `loadMoreRecent` function, which queries more recent messages.\n   * 2. Ensures that we call `loadMoreRecent`, once per content length\n   * 3. If the call to `loadMore` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnStartReached = async (limit?: number) => {\n    // If onStartReached has already been called for given data length, then ignore.\n    if (\n      processedMessageList?.length &&\n      onStartReachedTracker.current[processedMessageList.length]\n    ) {\n      return;\n    }\n\n    if (processedMessageList?.length) {\n      onStartReachedTracker.current[processedMessageList.length] = true;\n    }\n\n    const callback = () => {\n      onStartReachedInPromise.current = null;\n\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onStartReached trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onStartReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onEndReached is in progress, better to wait for it to finish for smooth UX\n    if (onEndReachedInPromise.current) {\n      await onEndReachedInPromise.current;\n    }\n    onStartReachedInPromise.current = loadMoreRecent(limit).then(callback).catch(onError);\n  };\n\n  /**\n   * 1. Makes a call to `loadMore` function, which queries more older messages.\n   * 2. Ensures that we call `loadMore`, once per content length\n   * 3. If the call to `loadMoreRecent` is in progress, we wait for it to finish to make sure scroll doesn't jump.\n   */\n  const maybeCallOnEndReached = async () => {\n    // If onEndReached has already been called for given messageList length, then ignore.\n    if (processedMessageList?.length && onEndReachedTracker.current[processedMessageList.length]) {\n      return;\n    }\n\n    if (processedMessageList?.length) {\n      onEndReachedTracker.current[processedMessageList.length] = true;\n    }\n\n    const callback = () => {\n      onEndReachedInPromise.current = null;\n      return Promise.resolve();\n    };\n\n    const onError = () => {\n      /** Release the onEndReachedTracker trigger after 2 seconds, to try again */\n      setTimeout(() => {\n        onEndReachedTracker.current = {};\n      }, 2000);\n    };\n\n    // If onStartReached is in progress, better to wait for it to finish for smooth UX\n    if (onStartReachedInPromise.current) {\n      await onStartReachedInPromise.current;\n    }\n    onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore())\n      .then(callback)\n      .catch(onError);\n  };\n\n  const onUserScrollEvent: NonNullable<ScrollViewProps['onScroll']> = (event) => {\n    const nativeEvent = event.nativeEvent;\n    clearTimeout(onScrollEventTimeoutRef.current);\n    const offset = nativeEvent.contentOffset.y;\n    const visibleLength = nativeEvent.layoutMeasurement.height;\n    const contentLength = nativeEvent.contentSize.height;\n    if (!channel || !channelResyncScrollSet.current) {\n      return;\n    }\n\n    // Check if scroll has reached either start of end of list.\n    const isScrollAtStart = offset < 100;\n    const isScrollAtEnd = contentLength - visibleLength - offset < 100;\n\n    if (isScrollAtStart) {\n      maybeCallOnStartReached();\n    }\n\n    if (isScrollAtEnd) {\n      maybeCallOnEndReached();\n    }\n  };\n\n  const handleScroll: ScrollViewProps['onScroll'] = (event) => {\n    const offset = event.nativeEvent.contentOffset.y;\n    // Show scrollToBottom button once scroll position goes beyond 150.\n    const isScrollAtBottom = offset <= 150;\n\n    const notLatestSet = channel.state.messages !== channel.state.latestMessages;\n\n    const showScrollToBottomButton =\n      (!threadList && notLatestSet) || !isScrollAtBottom || !hasNoMoreRecentMessagesToLoad;\n\n    /**\n     * 1. If I scroll up -> show scrollToBottom button.\n     * 2. If I scroll to bottom of screen\n     *    |-> hide scrollToBottom button.\n     *    |-> if channel is unread, call markRead().\n     */\n    setScrollToBottomButtonVisible(showScrollToBottomButton);\n\n    const shouldMarkRead =\n      !threadList &&\n      !notLatestSet &&\n      offset <= 0 &&\n      hasNoMoreRecentMessagesToLoad &&\n      channel.countUnread() > 0;\n\n    if (shouldMarkRead) {\n      markRead();\n    }\n\n    setInitialScrollDone(false);\n\n    if (onListScroll) {\n      onListScroll(event);\n    }\n  };\n\n  const goToNewMessages = async () => {\n    const isNotLatestSet = channel.state.messages !== channel.state.latestMessages;\n    if (isNotLatestSet && hasNoMoreRecentMessagesToLoad) {\n      loadChannelAroundMessage({});\n    } else if (!hasNoMoreRecentMessagesToLoad) {\n      resetPaginationTrackersRef.current();\n      await reloadChannel();\n    } else if (flatListRef.current) {\n      flatListRef.current.scrollToOffset({\n        offset: 0,\n      });\n    }\n\n    setScrollToBottomButtonVisible(false);\n    if (!threadList) {\n      markRead();\n    }\n  };\n\n  const scrollToIndexFailedRetryCountRef = useRef<number>(0);\n  const failScrollTimeoutId = useRef<NodeJS.Timeout>();\n  const onScrollToIndexFailedRef = useRef<\n    FlatListProps<MessageType<StreamChatGenerics>>['onScrollToIndexFailed']\n  >((info) => {\n    // We got a failure as we tried to scroll to an item that was outside the render length\n    if (!flatListRef.current) return;\n    // we don't know the actual size of all items but we can see the average, so scroll to the closest offset\n    flatListRef.current.scrollToOffset({\n      animated: false,\n      offset: info.averageItemLength * info.index,\n    });\n    // since we used only an average offset... we won't go to the center of the item yet\n    // with a little delay to wait for scroll to offset to complete, we can then scroll to the index\n    failScrollTimeoutId.current = setTimeout(() => {\n      try {\n        flatListRef.current?.scrollToIndex({\n          animated: false,\n          index: info.index,\n          viewPosition: 0.5, // try to place message in the center of the screen\n        });\n        if (messageIdLastScrolledToRef.current) {\n          // in case the target message was cleared out\n          // the state being set again will trigger the highlight again\n          setTargetedMessage(messageIdLastScrolledToRef.current);\n        }\n        scrollToIndexFailedRetryCountRef.current = 0;\n      } catch (e) {\n        if (\n          !onScrollToIndexFailedRef.current ||\n          scrollToIndexFailedRetryCountRef.current > MAX_RETRIES_AFTER_SCROLL_FAILURE\n        ) {\n          scrollToIndexFailedRetryCountRef.current = 0;\n          return;\n        }\n        // At some cases the index we're trying to scroll to, doesn't exist yet in the messageList\n        // Scrolling to an index not in range of the Flatlist's data will result in a crash that\n        // won't call onScrollToIndexFailed.\n        // By catching this error we retry scrolling by calling onScrollToIndexFailedRef\n        scrollToIndexFailedRetryCountRef.current += 1;\n        onScrollToIndexFailedRef.current(info);\n      }\n    }, WAIT_FOR_SCROLL_TO_OFFSET_TIMEOUT);\n\n    // Only when index is greater than 0 and in range of items in FlatList\n    // this onScrollToIndexFailed will be called again\n  });\n\n  const goToMessage = (messageId: string) => {\n    const indexOfParentInMessageList = processedMessageList.findIndex(\n      (message) => message?.id === messageId,\n    );\n    if (indexOfParentInMessageList !== -1 && flatListRef.current) {\n      clearTimeout(failScrollTimeoutId.current);\n      scrollToIndexFailedRetryCountRef.current = 0;\n      // keep track of this messageId, so that we dont scroll to again in useEffect for targeted message change\n      messageIdLastScrolledToRef.current = messageId;\n      setTargetedMessage(messageId);\n      // now scroll to it with animated=true (in useEffect animated=false is used)\n      flatListRef.current.scrollToIndex({\n        animated: true,\n        index: indexOfParentInMessageList,\n        viewPosition: 0.5, // try to place message in the center of the screen\n      });\n      return;\n    }\n    // the message we want was not loaded yet, so lets load it\n    loadChannelAroundMessage({ messageId });\n  };\n\n  /**\n   * Check if a messageId needs to be scrolled to after list loads, and scroll to it\n   * Note: This effect fires on every list change with a small debounce so that scrolling isnt abrupted by an immediate rerender\n   */\n  useEffect(() => {\n    scrollToDebounceTimeoutRef.current = setTimeout(() => {\n      if (initialScrollToFirstUnreadMessage) {\n        clearTimeout(initialScrollSettingTimeoutRef.current);\n        initialScrollSettingTimeoutRef.current = setTimeout(() => {\n          // small timeout to ensure that handleScroll is called after scrollToIndex to set this flag\n          setInitialScrollDone(true);\n        }, 2000);\n      }\n      let messageIdToScroll: string | undefined;\n      if (targetedMessage && messageIdLastScrolledToRef.current !== targetedMessage) {\n        // if some messageId was targeted but not scrolledTo yet\n        // we have scroll to there after loading completes\n        messageIdToScroll = targetedMessage;\n      }\n      if (!messageIdToScroll) return;\n      const indexOfParentInMessageList = processedMessageList.findIndex(\n        (message) => message?.id === messageIdToScroll,\n      );\n      if (indexOfParentInMessageList !== -1 && flatListRef.current) {\n        // By a fresh scroll we should clear the retries for the previous failed scroll\n        clearTimeout(scrollToDebounceTimeoutRef.current);\n        clearTimeout(failScrollTimeoutId.current);\n        // keep track of this messageId, so that we dont scroll to again for targeted message change\n        messageIdLastScrolledToRef.current = messageIdToScroll;\n        // reset the retry count\n        scrollToIndexFailedRetryCountRef.current = 0;\n        // now scroll to it\n        flatListRef.current.scrollToIndex({\n          animated: false,\n          index: indexOfParentInMessageList,\n          viewPosition: 0.5, // try to place message in the center of the screen\n        });\n      }\n    }, 50);\n  }, [targetedMessage, initialScrollToFirstUnreadMessage]);\n\n  const messagesWithImages =\n    legacyImageViewerSwipeBehaviour &&\n    processedMessageList.filter((message) => {\n      const isMessageTypeDeleted = message.type === 'deleted';\n      if (!isMessageTypeDeleted && message.attachments) {\n        return message.attachments.some(\n          (attachment) =>\n            attachment.type === 'image' &&\n            !attachment.title_link &&\n            !attachment.og_scrape_url &&\n            (attachment.image_url || attachment.thumb_url),\n        );\n      }\n      return false;\n    });\n\n  /**\n   * This is for the useEffect to run again in the case that a message\n   * gets edited with more or the same number of images\n   */\n  const imageString =\n    legacyImageViewerSwipeBehaviour &&\n    messagesWithImages &&\n    messagesWithImages\n      .map((message) =>\n        message.attachments\n          ?.map((attachment) => attachment.image_url || attachment.thumb_url || '')\n          .join(),\n      )\n      .join();\n\n  const numberOfMessagesWithImages =\n    legacyImageViewerSwipeBehaviour && messagesWithImages && messagesWithImages.length;\n  const threadExists = !!thread;\n\n  useEffect(() => {\n    if (\n      legacyImageViewerSwipeBehaviour &&\n      isListActive &&\n      ((threadList && thread) || (!threadList && !thread))\n    ) {\n      setMessages(messagesWithImages as MessageType<StreamChatGenerics>[]);\n    }\n  }, [\n    imageString,\n    isListActive,\n    legacyImageViewerSwipeBehaviour,\n    numberOfMessagesWithImages,\n    threadExists,\n    threadList,\n  ]);\n\n  const stickyHeaderFormatDate =\n    stickyHeaderDate?.getFullYear() === new Date().getFullYear() ? 'MMM D' : 'MMM D, YYYY';\n  const tStickyHeaderDate =\n    stickyHeaderDate && !hideStickyDateHeader ? tDateTimeParser(stickyHeaderDate) : null;\n\n  const stickyHeaderDateString = useMemo(() => {\n    if (tStickyHeaderDate === null || hideStickyDateHeader) return null;\n    if (isDayOrMoment(tStickyHeaderDate)) return tStickyHeaderDate.format(stickyHeaderFormatDate);\n\n    return new Date(tStickyHeaderDate).toDateString();\n  }, [tStickyHeaderDate, stickyHeaderFormatDate, hideStickyDateHeader]);\n\n  const dismissImagePicker = () => {\n    if (!hasMoved && selectedPicker) {\n      setSelectedPicker(undefined);\n      closePicker();\n    }\n  };\n  const onScrollBeginDrag: ScrollViewProps['onScrollBeginDrag'] = (event) => {\n    !hasMoved && selectedPicker && setHasMoved(true);\n    onUserScrollEvent(event);\n  };\n  const onScrollEndDrag: ScrollViewProps['onScrollEndDrag'] = (event) => {\n    hasMoved && selectedPicker && setHasMoved(false);\n    onUserScrollEvent(event);\n  };\n\n  const refCallback = (ref: FlatListType<MessageType<StreamChatGenerics>>) => {\n    flatListRef.current = ref;\n\n    if (setFlatListRef) {\n      setFlatListRef(ref);\n    }\n  };\n\n  const debugRef = useDebugContext();\n\n  const isDebugModeEnabled = __DEV__ && debugRef && debugRef.current;\n\n  if (isDebugModeEnabled) {\n    if (debugRef.current.setEventType) debugRef.current.setEventType('send');\n    if (debugRef.current.setSendEventParams)\n      debugRef.current.setSendEventParams({\n        action: thread ? 'ThreadList' : 'Messages',\n        data: processedMessageList,\n      });\n  }\n\n  const renderListEmptyComponent = useCallback(\n    () => (\n      <View\n        style={[styles.flex, shouldApplyAndroidWorkaround ? styles.invertAndroid : styles.invert]}\n        testID='empty-state'\n      >\n        <EmptyStateIndicator listType='message' />\n      </View>\n    ),\n    [EmptyStateIndicator, shouldApplyAndroidWorkaround],\n  );\n\n  const ListFooterComponent = useCallback(\n    () => (\n      <View style={shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined}>\n        <FooterComponent />\n      </View>\n    ),\n    [shouldApplyAndroidWorkaround, FooterComponent],\n  );\n\n  const ListHeaderComponent = useCallback(\n    () => (\n      <View style={shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined}>\n        <HeaderComponent />\n      </View>\n    ),\n    [shouldApplyAndroidWorkaround, HeaderComponent],\n  );\n\n  if (!FlatList) return null;\n\n  if (loading) {\n    return (\n      <View style={styles.flex}>\n        <LoadingIndicator listType='message' />\n      </View>\n    );\n  }\n\n  const StickyHeaderComponent = () => {\n    if (!stickyHeaderDateString) return null;\n    if (StickyHeader) return <StickyHeader dateString={stickyHeaderDateString} />;\n    if (messageListLengthAfterUpdate) return <DateHeader dateString={stickyHeaderDateString} />;\n    return null;\n  };\n\n  // We need to omit the style related props from the additionalFlatListProps and add them directly instead of spreading\n  let additionalFlatListPropsExcludingStyle:\n    | Omit<NonNullable<typeof additionalFlatListProps>, 'style' | 'contentContainerStyle'>\n    | undefined;\n\n  if (additionalFlatListProps) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { contentContainerStyle, style, ...rest } = additionalFlatListProps;\n    additionalFlatListPropsExcludingStyle = rest;\n  }\n\n  return (\n    <View\n      style={[styles.container, { backgroundColor: white_snow }, container]}\n      testID='message-flat-list-wrapper'\n    >\n      <FlatList\n        CellRendererComponent={\n          shouldApplyAndroidWorkaround ? InvertedCellRendererComponent : undefined\n        }\n        contentContainerStyle={[\n          styles.contentContainer,\n          additionalFlatListProps?.contentContainerStyle,\n          contentContainer,\n        ]}\n        /** Disables the MessageList UI. Which means, message actions, reactions won't work. */\n        data={processedMessageList}\n        extraData={disabled || !hasNoMoreRecentMessagesToLoad}\n        inverted={shouldApplyAndroidWorkaround ? false : inverted}\n        keyboardShouldPersistTaps='handled'\n        keyExtractor={keyExtractor}\n        ListEmptyComponent={renderListEmptyComponent}\n        ListFooterComponent={ListFooterComponent}\n        /**\n          if autoscrollToTopThreshold is 10, we scroll to recent if before new list update it was already at the bottom (10 offset or below)\n          minIndexForVisible = 1 means that beyond item at index 1 will not change position on list updates\n          minIndexForVisible is not used when autoscrollToTopThreshold = 10\n        */\n        ListHeaderComponent={ListHeaderComponent}\n        maintainVisibleContentPosition={{\n          autoscrollToTopThreshold: autoscrollToRecent ? 10 : undefined,\n          minIndexForVisible: 1,\n        }}\n        maxToRenderPerBatch={30}\n        onMomentumScrollEnd={onUserScrollEvent}\n        onScroll={handleScroll}\n        onScrollBeginDrag={onScrollBeginDrag}\n        onScrollEndDrag={onScrollEndDrag}\n        onScrollToIndexFailed={onScrollToIndexFailedRef.current}\n        onTouchEnd={dismissImagePicker}\n        onViewableItemsChanged={onViewableItemsChanged.current}\n        ref={refCallback}\n        renderItem={renderItem}\n        scrollEnabled={overlay === 'none'}\n        showsVerticalScrollIndicator={!shouldApplyAndroidWorkaround}\n        style={[\n          styles.listContainer,\n          listContainer,\n          additionalFlatListProps?.style,\n          shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined,\n        ]}\n        testID='message-flat-list'\n        viewabilityConfig={flatListViewabilityConfig}\n        {...additionalFlatListPropsExcludingStyle}\n      />\n      {!loading && (\n        <>\n          <View style={styles.stickyHeader}>\n            <StickyHeaderComponent />\n          </View>\n          {!disableTypingIndicator && TypingIndicator && (\n            <TypingIndicatorContainer>\n              <TypingIndicator />\n            </TypingIndicatorContainer>\n          )}\n          <ScrollToBottomButton\n            onPress={goToNewMessages}\n            showNotification={scrollToBottomButtonVisible}\n            unreadCount={threadList ? 0 : channel?.countUnread()}\n          />\n        </>\n      )}\n      <NetworkDownIndicator />\n    </View>\n  );\n};\n\nexport type MessageListProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<MessageListPropsWithContext<StreamChatGenerics>>;\n\nexport const MessageList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: MessageListProps<StreamChatGenerics>,\n) => {\n  const { closePicker, selectedPicker, setSelectedPicker } = useAttachmentPickerContext();\n  const {\n    channel,\n    disabled,\n    EmptyStateIndicator,\n    enableMessageGroupingByUser,\n    error,\n    hideStickyDateHeader,\n    isChannelActive,\n    loadChannelAroundMessage,\n    loading,\n    LoadingIndicator,\n    markRead,\n    NetworkDownIndicator,\n    reloadChannel,\n    scrollToFirstUnreadThreshold,\n    setTargetedMessage,\n    StickyHeader,\n    targetedMessage,\n    threadList,\n  } = useChannelContext<StreamChatGenerics>();\n  const { client } = useChatContext<StreamChatGenerics>();\n  const { setMessages } = useImageGalleryContext<StreamChatGenerics>();\n  const {\n    DateHeader,\n    disableTypingIndicator,\n    FlatList,\n    initialScrollToFirstUnreadMessage,\n    InlineDateSeparator,\n    InlineUnreadIndicator,\n    legacyImageViewerSwipeBehaviour,\n    Message,\n    MessageSystem,\n    myMessageTheme,\n    ScrollToBottomButton,\n    TypingIndicator,\n    TypingIndicatorContainer,\n  } = useMessagesContext<StreamChatGenerics>();\n  const { hasNoMoreRecentMessagesToLoad, loadMore, loadMoreRecent } =\n    usePaginatedMessageListContext<StreamChatGenerics>();\n  const { overlay } = useOverlayContext();\n  const { loadMoreThread, thread } = useThreadContext<StreamChatGenerics>();\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  return (\n    <MessageListWithContext\n      {...{\n        channel,\n        client,\n        closePicker,\n        DateHeader,\n        disabled,\n        disableTypingIndicator,\n        EmptyStateIndicator,\n        enableMessageGroupingByUser,\n        error,\n        FlatList,\n        hasNoMoreRecentMessagesToLoad,\n        hideStickyDateHeader,\n        initialScrollToFirstUnreadMessage,\n        InlineDateSeparator,\n        InlineUnreadIndicator,\n        isListActive: isChannelActive,\n        legacyImageViewerSwipeBehaviour,\n        loadChannelAroundMessage,\n        loading,\n        LoadingIndicator,\n        loadMore,\n        loadMoreRecent,\n        loadMoreThread,\n        markRead,\n        Message,\n        MessageSystem,\n        myMessageTheme,\n        NetworkDownIndicator,\n        overlay,\n        reloadChannel,\n        ScrollToBottomButton,\n        scrollToFirstUnreadThreshold,\n        selectedPicker,\n        setMessages,\n        setSelectedPicker,\n        setTargetedMessage,\n        StickyHeader,\n        t,\n        targetedMessage,\n        tDateTimeParser,\n        thread,\n        threadList,\n        TypingIndicator,\n        TypingIndicatorContainer,\n      }}\n      {...props}\n      noGroupByUser={!enableMessageGroupingByUser || props.noGroupByUser}\n    />\n  );\n};\n"],"mappings":"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"}