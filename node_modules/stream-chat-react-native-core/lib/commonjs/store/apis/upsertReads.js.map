{"version":3,"names":["_mapReadToStorable","require","_mapUserToStorable","_QuickSqliteClient","_createUpsertQuery","upsertReads","_ref","cid","_ref$flush","flush","reads","queries","storableReads","storableUsers","forEach","read","user","push","mapUserToStorable","mapReadToStorable","apply","_toConsumableArray2","map","storableUser","createUpsertQuery","storableRead","QuickSqliteClient","logger","users","executeSqlBatch","exports"],"sources":["upsertReads.ts"],"sourcesContent":["import type { ReadResponse } from 'stream-chat';\n\nimport { mapReadToStorable } from '../mappers/mapReadToStorable';\nimport { mapUserToStorable } from '../mappers/mapUserToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const upsertReads = ({\n  cid,\n  flush = true,\n  reads,\n}: {\n  cid: string;\n  reads: ReadResponse[];\n  flush?: boolean;\n}) => {\n  const queries: PreparedQueries[] = [];\n\n  const storableReads: Array<ReturnType<typeof mapReadToStorable>> = [];\n  const storableUsers: Array<ReturnType<typeof mapUserToStorable>> = [];\n\n  reads?.forEach((read) => {\n    if (read.user) {\n      storableUsers.push(mapUserToStorable(read.user));\n    }\n    storableReads.push(mapReadToStorable({ cid, read }));\n  });\n\n  queries.push(...storableUsers.map((storableUser) => createUpsertQuery('users', storableUser)));\n  queries.push(...storableReads.map((storableRead) => createUpsertQuery('reads', storableRead)));\n\n  QuickSqliteClient.logger?.('info', 'upsertReads', {\n    flush,\n    reads: storableReads,\n    users: storableUsers,\n  });\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(queries);\n  }\n\n  return queries;\n};\n"],"mappings":";;;;;;AAEA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AAGO,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAQlB;EAAA,IAPJC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAAC,UAAA,GAAAF,IAAA,CACHG,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;IACZE,KAAK,GAAAJ,IAAA,CAALI,KAAK;EAML,IAAMC,OAA0B,GAAG,EAAE;EAErC,IAAMC,aAA0D,GAAG,EAAE;EACrE,IAAMC,aAA0D,GAAG,EAAE;EAErEH,KAAK,oBAALA,KAAK,CAAEI,OAAO,CAAC,UAACC,IAAI,EAAK;IACvB,IAAIA,IAAI,CAACC,IAAI,EAAE;MACbH,aAAa,CAACI,IAAI,CAAC,IAAAC,oCAAiB,EAACH,IAAI,CAACC,IAAI,CAAC,CAAC;IAClD;IACAJ,aAAa,CAACK,IAAI,CAAC,IAAAE,oCAAiB,EAAC;MAAEZ,GAAG,EAAHA,GAAG;MAAEQ,IAAI,EAAJA;IAAK,CAAC,CAAC,CAAC;EACtD,CAAC,CAAC;EAEFJ,OAAO,CAACM,IAAI,CAAAG,KAAA,CAAZT,OAAO,MAAAU,mBAAA,aAASR,aAAa,CAACS,GAAG,CAAC,UAACC,YAAY;IAAA,OAAK,IAAAC,oCAAiB,EAAC,OAAO,EAAED,YAAY,CAAC;EAAA,EAAC,EAAC;EAC9FZ,OAAO,CAACM,IAAI,CAAAG,KAAA,CAAZT,OAAO,MAAAU,mBAAA,aAAST,aAAa,CAACU,GAAG,CAAC,UAACG,YAAY;IAAA,OAAK,IAAAD,oCAAiB,EAAC,OAAO,EAAEC,YAAY,CAAC;EAAA,EAAC,EAAC;EAE9FC,oCAAiB,CAACC,MAAM,oBAAxBD,oCAAiB,CAACC,MAAM,CAAG,MAAM,EAAE,aAAa,EAAE;IAChDlB,KAAK,EAALA,KAAK;IACLC,KAAK,EAAEE,aAAa;IACpBgB,KAAK,EAAEf;EACT,CAAC,CAAC;EAEF,IAAIJ,KAAK,EAAE;IACTiB,oCAAiB,CAACG,eAAe,CAAClB,OAAO,CAAC;EAC5C;EAEA,OAAOA,OAAO;AAChB,CAAC;AAACmB,OAAA,CAAAzB,WAAA,GAAAA,WAAA"}