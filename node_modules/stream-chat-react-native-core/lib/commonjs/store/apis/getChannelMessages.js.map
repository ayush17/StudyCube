{"version":3,"names":["_selectMessagesForChannels","require","_selectReactionsForMessages","_utils","_mapStorableToMessage","_QuickSqliteClient","getChannelMessages","_ref","channelIds","currentUserId","QuickSqliteClient","logger","messageRows","selectMessagesForChannels","messageIds","map","_ref2","id","reactionRows","selectReactionsForMessages","messageIdVsReactions","forEach","reaction","messageId","push","cidVsMessages","m","cid","isBlockedMessage","mapStorableToMessage","messageRow","exports"],"sources":["getChannelMessages.ts"],"sourcesContent":["import type { MessageResponse } from 'stream-chat';\n\nimport { selectMessagesForChannels } from './queries/selectMessagesForChannels';\n\nimport { selectReactionsForMessages } from './queries/selectReactionsForMessages';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { isBlockedMessage } from '../../utils/utils';\nimport { mapStorableToMessage } from '../mappers/mapStorableToMessage';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport type { TableRowJoinedUser } from '../types';\n\nexport const getChannelMessages = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  channelIds,\n  currentUserId,\n}: {\n  channelIds: string[];\n  currentUserId: string;\n}) => {\n  QuickSqliteClient.logger?.('info', 'getChannelMessages', {\n    channelIds,\n    currentUserId,\n  });\n  const messageRows = selectMessagesForChannels(channelIds);\n  const messageIds = messageRows.map(({ id }) => id);\n\n  // Populate the message reactions.\n  const reactionRows = selectReactionsForMessages(messageIds);\n  const messageIdVsReactions: Record<string, TableRowJoinedUser<'reactions'>[]> = {};\n  reactionRows.forEach((reaction) => {\n    if (!messageIdVsReactions[reaction.messageId]) {\n      messageIdVsReactions[reaction.messageId] = [];\n    }\n    messageIdVsReactions[reaction.messageId].push(reaction);\n  });\n\n  // Populate the messages.\n  const cidVsMessages: Record<string, MessageResponse<StreamChatGenerics>[]> = {};\n  messageRows.forEach((m) => {\n    if (!cidVsMessages[m.cid]) {\n      cidVsMessages[m.cid] = [];\n    }\n\n    if (!isBlockedMessage(m)) {\n      cidVsMessages[m.cid].push(\n        mapStorableToMessage<StreamChatGenerics>({\n          currentUserId,\n          messageRow: m,\n          reactionRows: messageIdVsReactions[m.id],\n        }),\n      );\n    }\n  });\n\n  return cidVsMessages;\n};\n"],"mappings":";;;;AAEA,IAAAA,0BAAA,GAAAC,OAAA;AAEA,IAAAC,2BAAA,GAAAD,OAAA;AAGA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AAGO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAQzB;EAAA,IALJC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IACVC,aAAa,GAAAF,IAAA,CAAbE,aAAa;EAKbC,oCAAiB,CAACC,MAAM,oBAAxBD,oCAAiB,CAACC,MAAM,CAAG,MAAM,EAAE,oBAAoB,EAAE;IACvDH,UAAU,EAAVA,UAAU;IACVC,aAAa,EAAbA;EACF,CAAC,CAAC;EACF,IAAMG,WAAW,GAAG,IAAAC,oDAAyB,EAACL,UAAU,CAAC;EACzD,IAAMM,UAAU,GAAGF,WAAW,CAACG,GAAG,CAAC,UAAAC,KAAA;IAAA,IAAGC,EAAE,GAAAD,KAAA,CAAFC,EAAE;IAAA,OAAOA,EAAE;EAAA,EAAC;EAGlD,IAAMC,YAAY,GAAG,IAAAC,sDAA0B,EAACL,UAAU,CAAC;EAC3D,IAAMM,oBAAuE,GAAG,CAAC,CAAC;EAClFF,YAAY,CAACG,OAAO,CAAC,UAACC,QAAQ,EAAK;IACjC,IAAI,CAACF,oBAAoB,CAACE,QAAQ,CAACC,SAAS,CAAC,EAAE;MAC7CH,oBAAoB,CAACE,QAAQ,CAACC,SAAS,CAAC,GAAG,EAAE;IAC/C;IACAH,oBAAoB,CAACE,QAAQ,CAACC,SAAS,CAAC,CAACC,IAAI,CAACF,QAAQ,CAAC;EACzD,CAAC,CAAC;EAGF,IAAMG,aAAoE,GAAG,CAAC,CAAC;EAC/Eb,WAAW,CAACS,OAAO,CAAC,UAACK,CAAC,EAAK;IACzB,IAAI,CAACD,aAAa,CAACC,CAAC,CAACC,GAAG,CAAC,EAAE;MACzBF,aAAa,CAACC,CAAC,CAACC,GAAG,CAAC,GAAG,EAAE;IAC3B;IAEA,IAAI,CAAC,IAAAC,uBAAgB,EAACF,CAAC,CAAC,EAAE;MACxBD,aAAa,CAACC,CAAC,CAACC,GAAG,CAAC,CAACH,IAAI,CACvB,IAAAK,0CAAoB,EAAqB;QACvCpB,aAAa,EAAbA,aAAa;QACbqB,UAAU,EAAEJ,CAAC;QACbR,YAAY,EAAEE,oBAAoB,CAACM,CAAC,CAACT,EAAE;MACzC,CAAC,CACH,CAAC;IACH;EACF,CAAC,CAAC;EAEF,OAAOQ,aAAa;AACtB,CAAC;AAACM,OAAA,CAAAzB,kBAAA,GAAAA,kBAAA"}