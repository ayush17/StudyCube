{"version":3,"names":["_mapMessageToStorable2","require","_mapReactionToStorable","_mapUserToStorable","_QuickSqliteClient","_createUpdateQuery","_createUpsertQuery","updateReaction","_ref","_ref$flush","flush","message","reaction","queries","storableUser","user","mapUserToStorable","push","createUpsertQuery","storableReaction","mapReactionToStorable","createUpdateQuery","messageId","message_id","userId","user_id","updatedReactionCounts","reaction_counts","_mapMessageToStorable","mapMessageToStorable","reactionCounts","id","QuickSqliteClient","logger","addedUser","updatedReaction","executeSqlBatch","exports"],"sources":["updateReaction.ts"],"sourcesContent":["import type { FormatMessageResponse, MessageResponse, ReactionResponse } from 'stream-chat';\n\nimport { mapMessageToStorable } from '../mappers/mapMessageToStorable';\nimport { mapReactionToStorable } from '../mappers/mapReactionToStorable';\nimport { mapUserToStorable } from '../mappers/mapUserToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpdateQuery } from '../sqlite-utils/createUpdateQuery';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const updateReaction = ({\n  flush = true,\n  message,\n  reaction,\n}: {\n  message: MessageResponse | FormatMessageResponse;\n  reaction: ReactionResponse;\n  flush?: boolean;\n}) => {\n  const queries: PreparedQueries[] = [];\n  let storableUser: ReturnType<typeof mapUserToStorable> | undefined;\n\n  if (reaction.user) {\n    storableUser = mapUserToStorable(reaction.user);\n    queries.push(createUpsertQuery('users', mapUserToStorable(reaction.user)));\n  }\n\n  const storableReaction = mapReactionToStorable(reaction);\n\n  queries.push(\n    createUpdateQuery('reactions', storableReaction, {\n      messageId: reaction.message_id,\n      userId: reaction.user_id,\n    }),\n  );\n\n  let updatedReactionCounts: string | undefined;\n\n  if (message.reaction_counts) {\n    const { reactionCounts } = mapMessageToStorable(message);\n    updatedReactionCounts = reactionCounts;\n\n    queries.push(\n      createUpdateQuery(\n        'messages',\n        {\n          reactionCounts,\n        },\n        {\n          id: message.id,\n        },\n      ),\n    );\n  }\n\n  QuickSqliteClient.logger?.('info', 'updateReaction', {\n    addedUser: storableUser,\n    flush,\n    updatedReaction: storableReaction,\n    updatedReactionCounts,\n  });\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(queries);\n  }\n\n  return queries;\n};\n"],"mappings":";;;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AACA,IAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AACA,IAAAK,kBAAA,GAAAL,OAAA;AAGO,IAAMM,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAQrB;EAAA,IAAAC,UAAA,GAAAD,IAAA,CAPJE,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;IACZE,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;EAMR,IAAMC,OAA0B,GAAG,EAAE;EACrC,IAAIC,YAA8D;EAElE,IAAIF,QAAQ,CAACG,IAAI,EAAE;IACjBD,YAAY,GAAG,IAAAE,oCAAiB,EAACJ,QAAQ,CAACG,IAAI,CAAC;IAC/CF,OAAO,CAACI,IAAI,CAAC,IAAAC,oCAAiB,EAAC,OAAO,EAAE,IAAAF,oCAAiB,EAACJ,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;EAC5E;EAEA,IAAMI,gBAAgB,GAAG,IAAAC,4CAAqB,EAACR,QAAQ,CAAC;EAExDC,OAAO,CAACI,IAAI,CACV,IAAAI,oCAAiB,EAAC,WAAW,EAAEF,gBAAgB,EAAE;IAC/CG,SAAS,EAAEV,QAAQ,CAACW,UAAU;IAC9BC,MAAM,EAAEZ,QAAQ,CAACa;EACnB,CAAC,CACH,CAAC;EAED,IAAIC,qBAAyC;EAE7C,IAAIf,OAAO,CAACgB,eAAe,EAAE;IAC3B,IAAAC,qBAAA,GAA2B,IAAAC,2CAAoB,EAAClB,OAAO,CAAC;MAAhDmB,cAAc,GAAAF,qBAAA,CAAdE,cAAc;IACtBJ,qBAAqB,GAAGI,cAAc;IAEtCjB,OAAO,CAACI,IAAI,CACV,IAAAI,oCAAiB,EACf,UAAU,EACV;MACES,cAAc,EAAdA;IACF,CAAC,EACD;MACEC,EAAE,EAAEpB,OAAO,CAACoB;IACd,CACF,CACF,CAAC;EACH;EAEAC,oCAAiB,CAACC,MAAM,oBAAxBD,oCAAiB,CAACC,MAAM,CAAG,MAAM,EAAE,gBAAgB,EAAE;IACnDC,SAAS,EAAEpB,YAAY;IACvBJ,KAAK,EAALA,KAAK;IACLyB,eAAe,EAAEhB,gBAAgB;IACjCO,qBAAqB,EAArBA;EACF,CAAC,CAAC;EAEF,IAAIhB,KAAK,EAAE;IACTsB,oCAAiB,CAACI,eAAe,CAACvB,OAAO,CAAC;EAC5C;EAEA,OAAOA,OAAO;AAChB,CAAC;AAACwB,OAAA,CAAA9B,cAAA,GAAAA,cAAA"}