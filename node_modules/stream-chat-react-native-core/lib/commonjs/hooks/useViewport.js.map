{"version":3,"names":["_react","require","_reactNative","useViewport","rounded","_useState","useState","Dimensions","get","_useState2","_slicedToArray2","viewportDimensions","setViewportDimensions","useEffect","subscriptions","addEventListener","_ref","window","prev","height","width","remove","vw","percentageWidth","value","Math","round","vh","percentageHeight","viewportFunctions","useMemo","exports"],"sources":["useViewport.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Dimensions } from 'react-native';\n\n/**\n * A custom hook that provides functions to calculate dimensions based on\n * a percentage of the viewport height (vh) and viewport width (vw). It\n * dynamically updates dimensions on changes in device orientation.\n *\n * @returns {Object} An object containing functions vh and vw.\n */\nexport const useViewport = (rounded?: boolean) => {\n  const [viewportDimensions, setViewportDimensions] = useState(Dimensions.get('window'));\n\n  useEffect(() => {\n    const subscriptions = Dimensions.addEventListener('change', ({ window }) => {\n      setViewportDimensions((prev) => {\n        const { height, width } = window;\n        if (prev.height !== height || prev.width !== width) {\n          return window;\n        }\n        return prev;\n      });\n    });\n\n    return () => subscriptions?.remove();\n  }, []);\n\n  const vw = (percentageWidth: number) => {\n    const value = viewportDimensions.width * (percentageWidth / 100);\n    return rounded ? Math.round(value) : value;\n  };\n\n  const vh = (percentageHeight: number) => {\n    const value = viewportDimensions.height * (percentageHeight / 100);\n    return rounded ? Math.round(value) : value;\n  };\n\n  const viewportFunctions = useMemo(() => ({ vh, vw }), [vh, vw]);\n\n  return viewportFunctions;\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AASO,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAIC,OAAiB,EAAK;EAChD,IAAAC,SAAA,GAAoD,IAAAC,eAAQ,EAACC,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAAAC,UAAA,OAAAC,eAAA,aAAAL,SAAA;IAA/EM,kBAAkB,GAAAF,UAAA;IAAEG,qBAAqB,GAAAH,UAAA;EAEhD,IAAAI,gBAAS,EAAC,YAAM;IACd,IAAMC,aAAa,GAAGP,uBAAU,CAACQ,gBAAgB,CAAC,QAAQ,EAAE,UAAAC,IAAA,EAAgB;MAAA,IAAbC,MAAM,GAAAD,IAAA,CAANC,MAAM;MACnEL,qBAAqB,CAAC,UAACM,IAAI,EAAK;QAC9B,IAAQC,MAAM,GAAYF,MAAM,CAAxBE,MAAM;UAAEC,KAAK,GAAKH,MAAM,CAAhBG,KAAK;QACrB,IAAIF,IAAI,CAACC,MAAM,KAAKA,MAAM,IAAID,IAAI,CAACE,KAAK,KAAKA,KAAK,EAAE;UAClD,OAAOH,MAAM;QACf;QACA,OAAOC,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;MAAA,OAAMJ,aAAa,oBAAbA,aAAa,CAAEO,MAAM,CAAC,CAAC;IAAA;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,EAAE,GAAG,SAALA,EAAEA,CAAIC,eAAuB,EAAK;IACtC,IAAMC,KAAK,GAAGb,kBAAkB,CAACS,KAAK,IAAIG,eAAe,GAAG,GAAG,CAAC;IAChE,OAAOnB,OAAO,GAAGqB,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,GAAGA,KAAK;EAC5C,CAAC;EAED,IAAMG,EAAE,GAAG,SAALA,EAAEA,CAAIC,gBAAwB,EAAK;IACvC,IAAMJ,KAAK,GAAGb,kBAAkB,CAACQ,MAAM,IAAIS,gBAAgB,GAAG,GAAG,CAAC;IAClE,OAAOxB,OAAO,GAAGqB,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,GAAGA,KAAK;EAC5C,CAAC;EAED,IAAMK,iBAAiB,GAAG,IAAAC,cAAO,EAAC;IAAA,OAAO;MAAEH,EAAE,EAAFA,EAAE;MAAEL,EAAE,EAAFA;IAAG,CAAC;EAAA,CAAC,EAAE,CAACK,EAAE,EAAEL,EAAE,CAAC,CAAC;EAE/D,OAAOO,iBAAiB;AAC1B,CAAC;AAACE,OAAA,CAAA5B,WAAA,GAAAA,WAAA"}